//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NuPortal.NuPortalEmpService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NuPortalEmployeeServiceSoap", Namespace="http://tempuri.org/")]
    public partial class NuPortalEmployeeService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPersonalInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAcademicOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetIdentityDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetExperienceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCompetencyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectEmployeeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEmployeeProfileCompletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ManagerAutoCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExitInterviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEmployeeRatingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetEmpGalleryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NuPortalEmployeeService() {
            this.Url = global::NuPortal.Properties.Settings.Default.NuPortal_NuPortalEmpService_NuPortalEmployeeService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateEmployeeCompletedEventHandler CreateEmployeeCompleted;
        
        /// <remarks/>
        public event UpdateEmployeeCompletedEventHandler UpdateEmployeeCompleted;
        
        /// <remarks/>
        public event SetPersonalInfoCompletedEventHandler SetPersonalInfoCompleted;
        
        /// <remarks/>
        public event SetAcademicCompletedEventHandler SetAcademicCompleted;
        
        /// <remarks/>
        public event SetIdentityDetailsCompletedEventHandler SetIdentityDetailsCompleted;
        
        /// <remarks/>
        public event SetExperienceCompletedEventHandler SetExperienceCompleted;
        
        /// <remarks/>
        public event SetCompetencyCompletedEventHandler SetCompetencyCompleted;
        
        /// <remarks/>
        public event SelectEmployeeInfoCompletedEventHandler SelectEmployeeInfoCompleted;
        
        /// <remarks/>
        public event GetEmployeeProfileCompletedCompletedEventHandler GetEmployeeProfileCompletedCompleted;
        
        /// <remarks/>
        public event ManagerAutoCompleteCompletedEventHandler ManagerAutoCompleteCompleted;
        
        /// <remarks/>
        public event UpdateExitInterviewCompletedEventHandler UpdateExitInterviewCompleted;
        
        /// <remarks/>
        public event UpdateEmployeeRatingCompletedEventHandler UpdateEmployeeRatingCompleted;
        
        /// <remarks/>
        public event SetEmpGalleryCompletedEventHandler SetEmpGalleryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateEmployee(
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    int CompanyId, 
                    int FkEmpStatus, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText) {
            object[] results = this.Invoke("CreateEmployee", new object[] {
                        FirstName,
                        LastName,
                        Title,
                        EmployeeCode,
                        JobTitle,
                        Manager,
                        ProfilePicUrl,
                        QuotesPictureUrl,
                        BackGroundPicUrl,
                        HireDate,
                        ConfirmationDate,
                        WorkEMail,
                        OfficeLocation,
                        WorkLocation,
                        EmptTypeId,
                        RelievingDate,
                        CompanyId,
                        FkEmpStatus,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        WeekOffDays,
                        StartTime,
                        EndTime,
                        QuotesText});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateEmployeeAsync(
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    int CompanyId, 
                    int FkEmpStatus, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText) {
            this.CreateEmployeeAsync(FirstName, LastName, Title, EmployeeCode, JobTitle, Manager, ProfilePicUrl, QuotesPictureUrl, BackGroundPicUrl, HireDate, ConfirmationDate, WorkEMail, OfficeLocation, WorkLocation, EmptTypeId, RelievingDate, CompanyId, FkEmpStatus, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, WeekOffDays, StartTime, EndTime, QuotesText, null);
        }
        
        /// <remarks/>
        public void CreateEmployeeAsync(
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    int CompanyId, 
                    int FkEmpStatus, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText, 
                    object userState) {
            if ((this.CreateEmployeeOperationCompleted == null)) {
                this.CreateEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEmployeeOperationCompleted);
            }
            this.InvokeAsync("CreateEmployee", new object[] {
                        FirstName,
                        LastName,
                        Title,
                        EmployeeCode,
                        JobTitle,
                        Manager,
                        ProfilePicUrl,
                        QuotesPictureUrl,
                        BackGroundPicUrl,
                        HireDate,
                        ConfirmationDate,
                        WorkEMail,
                        OfficeLocation,
                        WorkLocation,
                        EmptTypeId,
                        RelievingDate,
                        CompanyId,
                        FkEmpStatus,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        WeekOffDays,
                        StartTime,
                        EndTime,
                        QuotesText}, this.CreateEmployeeOperationCompleted, userState);
        }
        
        private void OnCreateEmployeeOperationCompleted(object arg) {
            if ((this.CreateEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEmployeeCompleted(this, new CreateEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateEmployee(
                    int employeeId, 
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    System.DateTime ModifiedDate, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText, 
                    int FkEmpStatus) {
            object[] results = this.Invoke("UpdateEmployee", new object[] {
                        employeeId,
                        FirstName,
                        LastName,
                        Title,
                        EmployeeCode,
                        JobTitle,
                        Manager,
                        ProfilePicUrl,
                        QuotesPictureUrl,
                        BackGroundPicUrl,
                        HireDate,
                        ConfirmationDate,
                        WorkEMail,
                        OfficeLocation,
                        WorkLocation,
                        EmptTypeId,
                        RelievingDate,
                        ModifiedDate,
                        ModifiedEmpId,
                        WeekOffDays,
                        StartTime,
                        EndTime,
                        QuotesText,
                        FkEmpStatus});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEmployeeAsync(
                    int employeeId, 
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    System.DateTime ModifiedDate, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText, 
                    int FkEmpStatus) {
            this.UpdateEmployeeAsync(employeeId, FirstName, LastName, Title, EmployeeCode, JobTitle, Manager, ProfilePicUrl, QuotesPictureUrl, BackGroundPicUrl, HireDate, ConfirmationDate, WorkEMail, OfficeLocation, WorkLocation, EmptTypeId, RelievingDate, ModifiedDate, ModifiedEmpId, WeekOffDays, StartTime, EndTime, QuotesText, FkEmpStatus, null);
        }
        
        /// <remarks/>
        public void UpdateEmployeeAsync(
                    int employeeId, 
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    System.DateTime ModifiedDate, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText, 
                    int FkEmpStatus, 
                    object userState) {
            if ((this.UpdateEmployeeOperationCompleted == null)) {
                this.UpdateEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEmployeeOperationCompleted);
            }
            this.InvokeAsync("UpdateEmployee", new object[] {
                        employeeId,
                        FirstName,
                        LastName,
                        Title,
                        EmployeeCode,
                        JobTitle,
                        Manager,
                        ProfilePicUrl,
                        QuotesPictureUrl,
                        BackGroundPicUrl,
                        HireDate,
                        ConfirmationDate,
                        WorkEMail,
                        OfficeLocation,
                        WorkLocation,
                        EmptTypeId,
                        RelievingDate,
                        ModifiedDate,
                        ModifiedEmpId,
                        WeekOffDays,
                        StartTime,
                        EndTime,
                        QuotesText,
                        FkEmpStatus}, this.UpdateEmployeeOperationCompleted, userState);
        }
        
        private void OnUpdateEmployeeOperationCompleted(object arg) {
            if ((this.UpdateEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEmployeeCompleted(this, new UpdateEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPersonalInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetPersonalInfo(
                    int EmpId, 
                    string Address1, 
                    string City1, 
                    string State1, 
                    string Country1, 
                    string ZipCode1, 
                    string Phone1, 
                    string Address2, 
                    string City2, 
                    string State2, 
                    string Country2, 
                    string ZipCode2, 
                    string Phone2, 
                    string EmergencyPhone, 
                    string EmailId, 
                    System.DateTime DOB, 
                    string Gender, 
                    string Nationality, 
                    string BloodGroup, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId) {
            object[] results = this.Invoke("SetPersonalInfo", new object[] {
                        EmpId,
                        Address1,
                        City1,
                        State1,
                        Country1,
                        ZipCode1,
                        Phone1,
                        Address2,
                        City2,
                        State2,
                        Country2,
                        ZipCode2,
                        Phone2,
                        EmergencyPhone,
                        EmailId,
                        DOB,
                        Gender,
                        Nationality,
                        BloodGroup,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPersonalInfoAsync(
                    int EmpId, 
                    string Address1, 
                    string City1, 
                    string State1, 
                    string Country1, 
                    string ZipCode1, 
                    string Phone1, 
                    string Address2, 
                    string City2, 
                    string State2, 
                    string Country2, 
                    string ZipCode2, 
                    string Phone2, 
                    string EmergencyPhone, 
                    string EmailId, 
                    System.DateTime DOB, 
                    string Gender, 
                    string Nationality, 
                    string BloodGroup, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId) {
            this.SetPersonalInfoAsync(EmpId, Address1, City1, State1, Country1, ZipCode1, Phone1, Address2, City2, State2, Country2, ZipCode2, Phone2, EmergencyPhone, EmailId, DOB, Gender, Nationality, BloodGroup, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, null);
        }
        
        /// <remarks/>
        public void SetPersonalInfoAsync(
                    int EmpId, 
                    string Address1, 
                    string City1, 
                    string State1, 
                    string Country1, 
                    string ZipCode1, 
                    string Phone1, 
                    string Address2, 
                    string City2, 
                    string State2, 
                    string Country2, 
                    string ZipCode2, 
                    string Phone2, 
                    string EmergencyPhone, 
                    string EmailId, 
                    System.DateTime DOB, 
                    string Gender, 
                    string Nationality, 
                    string BloodGroup, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    object userState) {
            if ((this.SetPersonalInfoOperationCompleted == null)) {
                this.SetPersonalInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPersonalInfoOperationCompleted);
            }
            this.InvokeAsync("SetPersonalInfo", new object[] {
                        EmpId,
                        Address1,
                        City1,
                        State1,
                        Country1,
                        ZipCode1,
                        Phone1,
                        Address2,
                        City2,
                        State2,
                        Country2,
                        ZipCode2,
                        Phone2,
                        EmergencyPhone,
                        EmailId,
                        DOB,
                        Gender,
                        Nationality,
                        BloodGroup,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId}, this.SetPersonalInfoOperationCompleted, userState);
        }
        
        private void OnSetPersonalInfoOperationCompleted(object arg) {
            if ((this.SetPersonalInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPersonalInfoCompleted(this, new SetPersonalInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetAcademic", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetAcademic(int Id, string jsonAcademic) {
            object[] results = this.Invoke("SetAcademic", new object[] {
                        Id,
                        jsonAcademic});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetAcademicAsync(int Id, string jsonAcademic) {
            this.SetAcademicAsync(Id, jsonAcademic, null);
        }
        
        /// <remarks/>
        public void SetAcademicAsync(int Id, string jsonAcademic, object userState) {
            if ((this.SetAcademicOperationCompleted == null)) {
                this.SetAcademicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAcademicOperationCompleted);
            }
            this.InvokeAsync("SetAcademic", new object[] {
                        Id,
                        jsonAcademic}, this.SetAcademicOperationCompleted, userState);
        }
        
        private void OnSetAcademicOperationCompleted(object arg) {
            if ((this.SetAcademicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAcademicCompleted(this, new SetAcademicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetIdentityDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetIdentityDetails(int Id, string jsonIdentityDetails) {
            object[] results = this.Invoke("SetIdentityDetails", new object[] {
                        Id,
                        jsonIdentityDetails});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetIdentityDetailsAsync(int Id, string jsonIdentityDetails) {
            this.SetIdentityDetailsAsync(Id, jsonIdentityDetails, null);
        }
        
        /// <remarks/>
        public void SetIdentityDetailsAsync(int Id, string jsonIdentityDetails, object userState) {
            if ((this.SetIdentityDetailsOperationCompleted == null)) {
                this.SetIdentityDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetIdentityDetailsOperationCompleted);
            }
            this.InvokeAsync("SetIdentityDetails", new object[] {
                        Id,
                        jsonIdentityDetails}, this.SetIdentityDetailsOperationCompleted, userState);
        }
        
        private void OnSetIdentityDetailsOperationCompleted(object arg) {
            if ((this.SetIdentityDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetIdentityDetailsCompleted(this, new SetIdentityDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetExperience", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetExperience(int Id, string jsonExperience) {
            object[] results = this.Invoke("SetExperience", new object[] {
                        Id,
                        jsonExperience});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetExperienceAsync(int Id, string jsonExperience) {
            this.SetExperienceAsync(Id, jsonExperience, null);
        }
        
        /// <remarks/>
        public void SetExperienceAsync(int Id, string jsonExperience, object userState) {
            if ((this.SetExperienceOperationCompleted == null)) {
                this.SetExperienceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetExperienceOperationCompleted);
            }
            this.InvokeAsync("SetExperience", new object[] {
                        Id,
                        jsonExperience}, this.SetExperienceOperationCompleted, userState);
        }
        
        private void OnSetExperienceOperationCompleted(object arg) {
            if ((this.SetExperienceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetExperienceCompleted(this, new SetExperienceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCompetency", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCompetency(int Id, string jsonCompetency) {
            object[] results = this.Invoke("SetCompetency", new object[] {
                        Id,
                        jsonCompetency});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCompetencyAsync(int Id, string jsonCompetency) {
            this.SetCompetencyAsync(Id, jsonCompetency, null);
        }
        
        /// <remarks/>
        public void SetCompetencyAsync(int Id, string jsonCompetency, object userState) {
            if ((this.SetCompetencyOperationCompleted == null)) {
                this.SetCompetencyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCompetencyOperationCompleted);
            }
            this.InvokeAsync("SetCompetency", new object[] {
                        Id,
                        jsonCompetency}, this.SetCompetencyOperationCompleted, userState);
        }
        
        private void OnSetCompetencyOperationCompleted(object arg) {
            if ((this.SetCompetencyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCompetencyCompleted(this, new SetCompetencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectEmployeeInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectEmployeeInfo(int Id, int Operation) {
            object[] results = this.Invoke("SelectEmployeeInfo", new object[] {
                        Id,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SelectEmployeeInfoAsync(int Id, int Operation) {
            this.SelectEmployeeInfoAsync(Id, Operation, null);
        }
        
        /// <remarks/>
        public void SelectEmployeeInfoAsync(int Id, int Operation, object userState) {
            if ((this.SelectEmployeeInfoOperationCompleted == null)) {
                this.SelectEmployeeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectEmployeeInfoOperationCompleted);
            }
            this.InvokeAsync("SelectEmployeeInfo", new object[] {
                        Id,
                        Operation}, this.SelectEmployeeInfoOperationCompleted, userState);
        }
        
        private void OnSelectEmployeeInfoOperationCompleted(object arg) {
            if ((this.SelectEmployeeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectEmployeeInfoCompleted(this, new SelectEmployeeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEmployeeProfileCompleted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetEmployeeProfileCompleted(int EmpId) {
            object[] results = this.Invoke("GetEmployeeProfileCompleted", new object[] {
                        EmpId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEmployeeProfileCompletedAsync(int EmpId) {
            this.GetEmployeeProfileCompletedAsync(EmpId, null);
        }
        
        /// <remarks/>
        public void GetEmployeeProfileCompletedAsync(int EmpId, object userState) {
            if ((this.GetEmployeeProfileCompletedOperationCompleted == null)) {
                this.GetEmployeeProfileCompletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEmployeeProfileCompletedOperationCompleted);
            }
            this.InvokeAsync("GetEmployeeProfileCompleted", new object[] {
                        EmpId}, this.GetEmployeeProfileCompletedOperationCompleted, userState);
        }
        
        private void OnGetEmployeeProfileCompletedOperationCompleted(object arg) {
            if ((this.GetEmployeeProfileCompletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEmployeeProfileCompletedCompleted(this, new GetEmployeeProfileCompletedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ManagerAutoComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ManagerAutoComplete(int Id, string FirstName, int EmpId, int Operation) {
            object[] results = this.Invoke("ManagerAutoComplete", new object[] {
                        Id,
                        FirstName,
                        EmpId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ManagerAutoCompleteAsync(int Id, string FirstName, int EmpId, int Operation) {
            this.ManagerAutoCompleteAsync(Id, FirstName, EmpId, Operation, null);
        }
        
        /// <remarks/>
        public void ManagerAutoCompleteAsync(int Id, string FirstName, int EmpId, int Operation, object userState) {
            if ((this.ManagerAutoCompleteOperationCompleted == null)) {
                this.ManagerAutoCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnManagerAutoCompleteOperationCompleted);
            }
            this.InvokeAsync("ManagerAutoComplete", new object[] {
                        Id,
                        FirstName,
                        EmpId,
                        Operation}, this.ManagerAutoCompleteOperationCompleted, userState);
        }
        
        private void OnManagerAutoCompleteOperationCompleted(object arg) {
            if ((this.ManagerAutoCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ManagerAutoCompleteCompleted(this, new ManagerAutoCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateExitInterview", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateExitInterview(int Id, System.DateTime RelievingDate, string Attachments, string Operation) {
            object[] results = this.Invoke("UpdateExitInterview", new object[] {
                        Id,
                        RelievingDate,
                        Attachments,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExitInterviewAsync(int Id, System.DateTime RelievingDate, string Attachments, string Operation) {
            this.UpdateExitInterviewAsync(Id, RelievingDate, Attachments, Operation, null);
        }
        
        /// <remarks/>
        public void UpdateExitInterviewAsync(int Id, System.DateTime RelievingDate, string Attachments, string Operation, object userState) {
            if ((this.UpdateExitInterviewOperationCompleted == null)) {
                this.UpdateExitInterviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExitInterviewOperationCompleted);
            }
            this.InvokeAsync("UpdateExitInterview", new object[] {
                        Id,
                        RelievingDate,
                        Attachments,
                        Operation}, this.UpdateExitInterviewOperationCompleted, userState);
        }
        
        private void OnUpdateExitInterviewOperationCompleted(object arg) {
            if ((this.UpdateExitInterviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExitInterviewCompleted(this, new UpdateExitInterviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateEmployeeRating", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateEmployeeRating(int Id, int RatedTo, int RatedBy, int Rating, int CreatedEmpID, int ModifiedEmpId, int Status, int RatingFactorId, int Operation) {
            object[] results = this.Invoke("UpdateEmployeeRating", new object[] {
                        Id,
                        RatedTo,
                        RatedBy,
                        Rating,
                        CreatedEmpID,
                        ModifiedEmpId,
                        Status,
                        RatingFactorId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEmployeeRatingAsync(int Id, int RatedTo, int RatedBy, int Rating, int CreatedEmpID, int ModifiedEmpId, int Status, int RatingFactorId, int Operation) {
            this.UpdateEmployeeRatingAsync(Id, RatedTo, RatedBy, Rating, CreatedEmpID, ModifiedEmpId, Status, RatingFactorId, Operation, null);
        }
        
        /// <remarks/>
        public void UpdateEmployeeRatingAsync(int Id, int RatedTo, int RatedBy, int Rating, int CreatedEmpID, int ModifiedEmpId, int Status, int RatingFactorId, int Operation, object userState) {
            if ((this.UpdateEmployeeRatingOperationCompleted == null)) {
                this.UpdateEmployeeRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEmployeeRatingOperationCompleted);
            }
            this.InvokeAsync("UpdateEmployeeRating", new object[] {
                        Id,
                        RatedTo,
                        RatedBy,
                        Rating,
                        CreatedEmpID,
                        ModifiedEmpId,
                        Status,
                        RatingFactorId,
                        Operation}, this.UpdateEmployeeRatingOperationCompleted, userState);
        }
        
        private void OnUpdateEmployeeRatingOperationCompleted(object arg) {
            if ((this.UpdateEmployeeRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEmployeeRatingCompleted(this, new UpdateEmployeeRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetEmpGallery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetEmpGallery(int Id, string jsonEmpGallery) {
            object[] results = this.Invoke("SetEmpGallery", new object[] {
                        Id,
                        jsonEmpGallery});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetEmpGalleryAsync(int Id, string jsonEmpGallery) {
            this.SetEmpGalleryAsync(Id, jsonEmpGallery, null);
        }
        
        /// <remarks/>
        public void SetEmpGalleryAsync(int Id, string jsonEmpGallery, object userState) {
            if ((this.SetEmpGalleryOperationCompleted == null)) {
                this.SetEmpGalleryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetEmpGalleryOperationCompleted);
            }
            this.InvokeAsync("SetEmpGallery", new object[] {
                        Id,
                        jsonEmpGallery}, this.SetEmpGalleryOperationCompleted, userState);
        }
        
        private void OnSetEmpGalleryOperationCompleted(object arg) {
            if ((this.SetEmpGalleryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetEmpGalleryCompleted(this, new SetEmpGalleryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateEmployeeCompletedEventHandler(object sender, CreateEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEmployeeCompletedEventHandler(object sender, UpdateEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetPersonalInfoCompletedEventHandler(object sender, SetPersonalInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPersonalInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPersonalInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetAcademicCompletedEventHandler(object sender, SetAcademicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetAcademicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetAcademicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetIdentityDetailsCompletedEventHandler(object sender, SetIdentityDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetIdentityDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetIdentityDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetExperienceCompletedEventHandler(object sender, SetExperienceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetExperienceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetExperienceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetCompetencyCompletedEventHandler(object sender, SetCompetencyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCompetencyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCompetencyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SelectEmployeeInfoCompletedEventHandler(object sender, SelectEmployeeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectEmployeeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectEmployeeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetEmployeeProfileCompletedCompletedEventHandler(object sender, GetEmployeeProfileCompletedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEmployeeProfileCompletedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEmployeeProfileCompletedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ManagerAutoCompleteCompletedEventHandler(object sender, ManagerAutoCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ManagerAutoCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ManagerAutoCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateExitInterviewCompletedEventHandler(object sender, UpdateExitInterviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExitInterviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExitInterviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateEmployeeRatingCompletedEventHandler(object sender, UpdateEmployeeRatingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEmployeeRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEmployeeRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetEmpGalleryCompletedEventHandler(object sender, SetEmpGalleryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetEmpGalleryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetEmpGalleryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591