//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NuPortal.NuPortalProjectService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NuPortalProjectSoap", Namespace="http://tempuri.org/")]
    public partial class NuPortalProject : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetClientAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMangersForProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetResourcesForProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProjectTaskOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetResourceForTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProjectDocumentsOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTaskDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTimeSheetReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectTaskDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailToResourceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportExcelOperationsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NuPortalProject() {
            this.Url = global::NuPortal.Properties.Settings.Default.NuPortal_NuPortalProjectService_NuPortalProject;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateClientCompletedEventHandler CreateClientCompleted;
        
        /// <remarks/>
        public event SetClientAddressCompletedEventHandler SetClientAddressCompleted;
        
        /// <remarks/>
        public event CreateContactCompletedEventHandler CreateContactCompleted;
        
        /// <remarks/>
        public event CreateProjectCompletedEventHandler CreateProjectCompleted;
        
        /// <remarks/>
        public event SetMangersForProjectsCompletedEventHandler SetMangersForProjectsCompleted;
        
        /// <remarks/>
        public event SetResourcesForProjectsCompletedEventHandler SetResourcesForProjectsCompleted;
        
        /// <remarks/>
        public event UpdateContactCompletedEventHandler UpdateContactCompleted;
        
        /// <remarks/>
        public event UpdateClientCompletedEventHandler UpdateClientCompleted;
        
        /// <remarks/>
        public event UpdateProjectCompletedEventHandler UpdateProjectCompleted;
        
        /// <remarks/>
        public event ProjectTaskOperCompletedEventHandler ProjectTaskOperCompleted;
        
        /// <remarks/>
        public event SetResourceForTaskCompletedEventHandler SetResourceForTaskCompleted;
        
        /// <remarks/>
        public event ProjectDocumentsOperCompletedEventHandler ProjectDocumentsOperCompleted;
        
        /// <remarks/>
        public event SetCustomDocumentsCompletedEventHandler SetCustomDocumentsCompleted;
        
        /// <remarks/>
        public event SetTaskDetailsCompletedEventHandler SetTaskDetailsCompleted;
        
        /// <remarks/>
        public event GetTimeSheetReportCompletedEventHandler GetTimeSheetReportCompleted;
        
        /// <remarks/>
        public event selectTaskDetailsCompletedEventHandler selectTaskDetailsCompleted;
        
        /// <remarks/>
        public event SendMailToResourceCompletedEventHandler SendMailToResourceCompleted;
        
        /// <remarks/>
        public event ImportExcelOperationsCompletedEventHandler ImportExcelOperationsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateClient(int CompanyId, string CompanyName, string Website, string PurchaseOrderNumber, string CompanyLogo, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status) {
            object[] results = this.Invoke("CreateClient", new object[] {
                        CompanyId,
                        CompanyName,
                        Website,
                        PurchaseOrderNumber,
                        CompanyLogo,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateClientAsync(int CompanyId, string CompanyName, string Website, string PurchaseOrderNumber, string CompanyLogo, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status) {
            this.CreateClientAsync(CompanyId, CompanyName, Website, PurchaseOrderNumber, CompanyLogo, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void CreateClientAsync(int CompanyId, string CompanyName, string Website, string PurchaseOrderNumber, string CompanyLogo, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status, object userState) {
            if ((this.CreateClientOperationCompleted == null)) {
                this.CreateClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateClientOperationCompleted);
            }
            this.InvokeAsync("CreateClient", new object[] {
                        CompanyId,
                        CompanyName,
                        Website,
                        PurchaseOrderNumber,
                        CompanyLogo,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status}, this.CreateClientOperationCompleted, userState);
        }
        
        private void OnCreateClientOperationCompleted(object arg) {
            if ((this.CreateClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateClientCompleted(this, new CreateClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetClientAddress", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetClientAddress(int Id, string jsonClientAddress) {
            object[] results = this.Invoke("SetClientAddress", new object[] {
                        Id,
                        jsonClientAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetClientAddressAsync(int Id, string jsonClientAddress) {
            this.SetClientAddressAsync(Id, jsonClientAddress, null);
        }
        
        /// <remarks/>
        public void SetClientAddressAsync(int Id, string jsonClientAddress, object userState) {
            if ((this.SetClientAddressOperationCompleted == null)) {
                this.SetClientAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetClientAddressOperationCompleted);
            }
            this.InvokeAsync("SetClientAddress", new object[] {
                        Id,
                        jsonClientAddress}, this.SetClientAddressOperationCompleted, userState);
        }
        
        private void OnSetClientAddressOperationCompleted(object arg) {
            if ((this.SetClientAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetClientAddressCompleted(this, new SetClientAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateContact(int ClientId, string ContactPerson, string ContactNumber, string Extension, string Mobile, string Designation, string Email, string Fax, string Department, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status) {
            object[] results = this.Invoke("CreateContact", new object[] {
                        ClientId,
                        ContactPerson,
                        ContactNumber,
                        Extension,
                        Mobile,
                        Designation,
                        Email,
                        Fax,
                        Department,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateContactAsync(int ClientId, string ContactPerson, string ContactNumber, string Extension, string Mobile, string Designation, string Email, string Fax, string Department, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status) {
            this.CreateContactAsync(ClientId, ContactPerson, ContactNumber, Extension, Mobile, Designation, Email, Fax, Department, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void CreateContactAsync(int ClientId, string ContactPerson, string ContactNumber, string Extension, string Mobile, string Designation, string Email, string Fax, string Department, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status, object userState) {
            if ((this.CreateContactOperationCompleted == null)) {
                this.CreateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateContactOperationCompleted);
            }
            this.InvokeAsync("CreateContact", new object[] {
                        ClientId,
                        ContactPerson,
                        ContactNumber,
                        Extension,
                        Mobile,
                        Designation,
                        Email,
                        Fax,
                        Department,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status}, this.CreateContactOperationCompleted, userState);
        }
        
        private void OnCreateContactOperationCompleted(object arg) {
            if ((this.CreateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateContactCompleted(this, new CreateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateProject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateProject(
                    int CompanyId, 
                    int ClientId, 
                    int ContactId, 
                    string Name, 
                    string Description, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    string URL, 
                    string Priority, 
                    string ProjectStatus, 
                    string ProjectType, 
                    string ProjectCategory, 
                    int PlannedHours, 
                    int FKDepartment, 
                    string CostCenter, 
                    string Technologies, 
                    string Attachments, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int Status) {
            object[] results = this.Invoke("CreateProject", new object[] {
                        CompanyId,
                        ClientId,
                        ContactId,
                        Name,
                        Description,
                        StartDate,
                        EndDate,
                        URL,
                        Priority,
                        ProjectStatus,
                        ProjectType,
                        ProjectCategory,
                        PlannedHours,
                        FKDepartment,
                        CostCenter,
                        Technologies,
                        Attachments,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateProjectAsync(
                    int CompanyId, 
                    int ClientId, 
                    int ContactId, 
                    string Name, 
                    string Description, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    string URL, 
                    string Priority, 
                    string ProjectStatus, 
                    string ProjectType, 
                    string ProjectCategory, 
                    int PlannedHours, 
                    int FKDepartment, 
                    string CostCenter, 
                    string Technologies, 
                    string Attachments, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int Status) {
            this.CreateProjectAsync(CompanyId, ClientId, ContactId, Name, Description, StartDate, EndDate, URL, Priority, ProjectStatus, ProjectType, ProjectCategory, PlannedHours, FKDepartment, CostCenter, Technologies, Attachments, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void CreateProjectAsync(
                    int CompanyId, 
                    int ClientId, 
                    int ContactId, 
                    string Name, 
                    string Description, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    string URL, 
                    string Priority, 
                    string ProjectStatus, 
                    string ProjectType, 
                    string ProjectCategory, 
                    int PlannedHours, 
                    int FKDepartment, 
                    string CostCenter, 
                    string Technologies, 
                    string Attachments, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int Status, 
                    object userState) {
            if ((this.CreateProjectOperationCompleted == null)) {
                this.CreateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProjectOperationCompleted);
            }
            this.InvokeAsync("CreateProject", new object[] {
                        CompanyId,
                        ClientId,
                        ContactId,
                        Name,
                        Description,
                        StartDate,
                        EndDate,
                        URL,
                        Priority,
                        ProjectStatus,
                        ProjectType,
                        ProjectCategory,
                        PlannedHours,
                        FKDepartment,
                        CostCenter,
                        Technologies,
                        Attachments,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status}, this.CreateProjectOperationCompleted, userState);
        }
        
        private void OnCreateProjectOperationCompleted(object arg) {
            if ((this.CreateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProjectCompleted(this, new CreateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetMangersForProjects", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetMangersForProjects(int Id, string jsonMangersForProjects) {
            object[] results = this.Invoke("SetMangersForProjects", new object[] {
                        Id,
                        jsonMangersForProjects});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetMangersForProjectsAsync(int Id, string jsonMangersForProjects) {
            this.SetMangersForProjectsAsync(Id, jsonMangersForProjects, null);
        }
        
        /// <remarks/>
        public void SetMangersForProjectsAsync(int Id, string jsonMangersForProjects, object userState) {
            if ((this.SetMangersForProjectsOperationCompleted == null)) {
                this.SetMangersForProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMangersForProjectsOperationCompleted);
            }
            this.InvokeAsync("SetMangersForProjects", new object[] {
                        Id,
                        jsonMangersForProjects}, this.SetMangersForProjectsOperationCompleted, userState);
        }
        
        private void OnSetMangersForProjectsOperationCompleted(object arg) {
            if ((this.SetMangersForProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMangersForProjectsCompleted(this, new SetMangersForProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetResourcesForProjects", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetResourcesForProjects(int Id, string jsonResourcesForProjects) {
            object[] results = this.Invoke("SetResourcesForProjects", new object[] {
                        Id,
                        jsonResourcesForProjects});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetResourcesForProjectsAsync(int Id, string jsonResourcesForProjects) {
            this.SetResourcesForProjectsAsync(Id, jsonResourcesForProjects, null);
        }
        
        /// <remarks/>
        public void SetResourcesForProjectsAsync(int Id, string jsonResourcesForProjects, object userState) {
            if ((this.SetResourcesForProjectsOperationCompleted == null)) {
                this.SetResourcesForProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetResourcesForProjectsOperationCompleted);
            }
            this.InvokeAsync("SetResourcesForProjects", new object[] {
                        Id,
                        jsonResourcesForProjects}, this.SetResourcesForProjectsOperationCompleted, userState);
        }
        
        private void OnSetResourcesForProjectsOperationCompleted(object arg) {
            if ((this.SetResourcesForProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetResourcesForProjectsCompleted(this, new SetResourcesForProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContact", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateContact(int ContactId, string ContactPerson, string ContactNumber, string Extension, string Mobile, string Designation, string Email, string Fax, string Department, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            object[] results = this.Invoke("UpdateContact", new object[] {
                        ContactId,
                        ContactPerson,
                        ContactNumber,
                        Extension,
                        Mobile,
                        Designation,
                        Email,
                        Fax,
                        Department,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateContactAsync(int ContactId, string ContactPerson, string ContactNumber, string Extension, string Mobile, string Designation, string Email, string Fax, string Department, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            this.UpdateContactAsync(ContactId, ContactPerson, ContactNumber, Extension, Mobile, Designation, Email, Fax, Department, ModifiedDate, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void UpdateContactAsync(int ContactId, string ContactPerson, string ContactNumber, string Extension, string Mobile, string Designation, string Email, string Fax, string Department, System.DateTime ModifiedDate, int ModifiedEmpId, int Status, object userState) {
            if ((this.UpdateContactOperationCompleted == null)) {
                this.UpdateContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateContactOperationCompleted);
            }
            this.InvokeAsync("UpdateContact", new object[] {
                        ContactId,
                        ContactPerson,
                        ContactNumber,
                        Extension,
                        Mobile,
                        Designation,
                        Email,
                        Fax,
                        Department,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status}, this.UpdateContactOperationCompleted, userState);
        }
        
        private void OnUpdateContactOperationCompleted(object arg) {
            if ((this.UpdateContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateContactCompleted(this, new UpdateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateClient(int ClientId, string CompanyName, string Website, string PurchaseOrderNumber, string CompanyLogo, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            object[] results = this.Invoke("UpdateClient", new object[] {
                        ClientId,
                        CompanyName,
                        Website,
                        PurchaseOrderNumber,
                        CompanyLogo,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateClientAsync(int ClientId, string CompanyName, string Website, string PurchaseOrderNumber, string CompanyLogo, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            this.UpdateClientAsync(ClientId, CompanyName, Website, PurchaseOrderNumber, CompanyLogo, ModifiedDate, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void UpdateClientAsync(int ClientId, string CompanyName, string Website, string PurchaseOrderNumber, string CompanyLogo, System.DateTime ModifiedDate, int ModifiedEmpId, int Status, object userState) {
            if ((this.UpdateClientOperationCompleted == null)) {
                this.UpdateClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateClientOperationCompleted);
            }
            this.InvokeAsync("UpdateClient", new object[] {
                        ClientId,
                        CompanyName,
                        Website,
                        PurchaseOrderNumber,
                        CompanyLogo,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status}, this.UpdateClientOperationCompleted, userState);
        }
        
        private void OnUpdateClientOperationCompleted(object arg) {
            if ((this.UpdateClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateClientCompleted(this, new UpdateClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateProject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateProject(
                    int ProjectId, 
                    int ClientId, 
                    int ContactId, 
                    string Name, 
                    string Description, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    string URL, 
                    string Priority, 
                    string ProjectStatus, 
                    string ProjectType, 
                    string ProjectCategory, 
                    int PlannedHours, 
                    int FKDepartment, 
                    string CostCenter, 
                    string Technologies, 
                    string Attachments, 
                    System.DateTime ModifiedDate, 
                    int ModifiedEmpId, 
                    int Status) {
            object[] results = this.Invoke("UpdateProject", new object[] {
                        ProjectId,
                        ClientId,
                        ContactId,
                        Name,
                        Description,
                        StartDate,
                        EndDate,
                        URL,
                        Priority,
                        ProjectStatus,
                        ProjectType,
                        ProjectCategory,
                        PlannedHours,
                        FKDepartment,
                        CostCenter,
                        Technologies,
                        Attachments,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProjectAsync(
                    int ProjectId, 
                    int ClientId, 
                    int ContactId, 
                    string Name, 
                    string Description, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    string URL, 
                    string Priority, 
                    string ProjectStatus, 
                    string ProjectType, 
                    string ProjectCategory, 
                    int PlannedHours, 
                    int FKDepartment, 
                    string CostCenter, 
                    string Technologies, 
                    string Attachments, 
                    System.DateTime ModifiedDate, 
                    int ModifiedEmpId, 
                    int Status) {
            this.UpdateProjectAsync(ProjectId, ClientId, ContactId, Name, Description, StartDate, EndDate, URL, Priority, ProjectStatus, ProjectType, ProjectCategory, PlannedHours, FKDepartment, CostCenter, Technologies, Attachments, ModifiedDate, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void UpdateProjectAsync(
                    int ProjectId, 
                    int ClientId, 
                    int ContactId, 
                    string Name, 
                    string Description, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    string URL, 
                    string Priority, 
                    string ProjectStatus, 
                    string ProjectType, 
                    string ProjectCategory, 
                    int PlannedHours, 
                    int FKDepartment, 
                    string CostCenter, 
                    string Technologies, 
                    string Attachments, 
                    System.DateTime ModifiedDate, 
                    int ModifiedEmpId, 
                    int Status, 
                    object userState) {
            if ((this.UpdateProjectOperationCompleted == null)) {
                this.UpdateProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectOperationCompleted);
            }
            this.InvokeAsync("UpdateProject", new object[] {
                        ProjectId,
                        ClientId,
                        ContactId,
                        Name,
                        Description,
                        StartDate,
                        EndDate,
                        URL,
                        Priority,
                        ProjectStatus,
                        ProjectType,
                        ProjectCategory,
                        PlannedHours,
                        FKDepartment,
                        CostCenter,
                        Technologies,
                        Attachments,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status}, this.UpdateProjectOperationCompleted, userState);
        }
        
        private void OnUpdateProjectOperationCompleted(object arg) {
            if ((this.UpdateProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProjectCompleted(this, new UpdateProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProjectTaskOper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProjectTaskOper(
                    int TaskId, 
                    int ProjectId, 
                    string TaskName, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    float PlannedHours, 
                    string ProjectPhase, 
                    int TaskStatusId, 
                    string TaskDetails, 
                    string Comments, 
                    string Priority, 
                    int Billable, 
                    string Attachments, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int Status, 
                    int Operation, 
                    int Flag, 
                    int UpdateFlag) {
            object[] results = this.Invoke("ProjectTaskOper", new object[] {
                        TaskId,
                        ProjectId,
                        TaskName,
                        StartDate,
                        EndDate,
                        PlannedHours,
                        ProjectPhase,
                        TaskStatusId,
                        TaskDetails,
                        Comments,
                        Priority,
                        Billable,
                        Attachments,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status,
                        Operation,
                        Flag,
                        UpdateFlag});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProjectTaskOperAsync(
                    int TaskId, 
                    int ProjectId, 
                    string TaskName, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    float PlannedHours, 
                    string ProjectPhase, 
                    int TaskStatusId, 
                    string TaskDetails, 
                    string Comments, 
                    string Priority, 
                    int Billable, 
                    string Attachments, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int Status, 
                    int Operation, 
                    int Flag, 
                    int UpdateFlag) {
            this.ProjectTaskOperAsync(TaskId, ProjectId, TaskName, StartDate, EndDate, PlannedHours, ProjectPhase, TaskStatusId, TaskDetails, Comments, Priority, Billable, Attachments, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, Status, Operation, Flag, UpdateFlag, null);
        }
        
        /// <remarks/>
        public void ProjectTaskOperAsync(
                    int TaskId, 
                    int ProjectId, 
                    string TaskName, 
                    System.DateTime StartDate, 
                    System.DateTime EndDate, 
                    float PlannedHours, 
                    string ProjectPhase, 
                    int TaskStatusId, 
                    string TaskDetails, 
                    string Comments, 
                    string Priority, 
                    int Billable, 
                    string Attachments, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int Status, 
                    int Operation, 
                    int Flag, 
                    int UpdateFlag, 
                    object userState) {
            if ((this.ProjectTaskOperOperationCompleted == null)) {
                this.ProjectTaskOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProjectTaskOperOperationCompleted);
            }
            this.InvokeAsync("ProjectTaskOper", new object[] {
                        TaskId,
                        ProjectId,
                        TaskName,
                        StartDate,
                        EndDate,
                        PlannedHours,
                        ProjectPhase,
                        TaskStatusId,
                        TaskDetails,
                        Comments,
                        Priority,
                        Billable,
                        Attachments,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status,
                        Operation,
                        Flag,
                        UpdateFlag}, this.ProjectTaskOperOperationCompleted, userState);
        }
        
        private void OnProjectTaskOperOperationCompleted(object arg) {
            if ((this.ProjectTaskOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProjectTaskOperCompleted(this, new ProjectTaskOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetResourceForTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetResourceForTask(int Id, string jsonResourceForTask, string EmpIdData) {
            object[] results = this.Invoke("SetResourceForTask", new object[] {
                        Id,
                        jsonResourceForTask,
                        EmpIdData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetResourceForTaskAsync(int Id, string jsonResourceForTask, string EmpIdData) {
            this.SetResourceForTaskAsync(Id, jsonResourceForTask, EmpIdData, null);
        }
        
        /// <remarks/>
        public void SetResourceForTaskAsync(int Id, string jsonResourceForTask, string EmpIdData, object userState) {
            if ((this.SetResourceForTaskOperationCompleted == null)) {
                this.SetResourceForTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetResourceForTaskOperationCompleted);
            }
            this.InvokeAsync("SetResourceForTask", new object[] {
                        Id,
                        jsonResourceForTask,
                        EmpIdData}, this.SetResourceForTaskOperationCompleted, userState);
        }
        
        private void OnSetResourceForTaskOperationCompleted(object arg) {
            if ((this.SetResourceForTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetResourceForTaskCompleted(this, new SetResourceForTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProjectDocumentsOper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProjectDocumentsOper(int DocumentId, int ProjectId, string DocumentName, int SharedTypeId, int FKRoleId, string Description, string Attachments, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status, int Operation) {
            object[] results = this.Invoke("ProjectDocumentsOper", new object[] {
                        DocumentId,
                        ProjectId,
                        DocumentName,
                        SharedTypeId,
                        FKRoleId,
                        Description,
                        Attachments,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProjectDocumentsOperAsync(int DocumentId, int ProjectId, string DocumentName, int SharedTypeId, int FKRoleId, string Description, string Attachments, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status, int Operation) {
            this.ProjectDocumentsOperAsync(DocumentId, ProjectId, DocumentName, SharedTypeId, FKRoleId, Description, Attachments, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, Status, Operation, null);
        }
        
        /// <remarks/>
        public void ProjectDocumentsOperAsync(int DocumentId, int ProjectId, string DocumentName, int SharedTypeId, int FKRoleId, string Description, string Attachments, System.DateTime CreatedDate, System.DateTime ModifiedDate, int CreatedEmpId, int ModifiedEmpId, int Status, int Operation, object userState) {
            if ((this.ProjectDocumentsOperOperationCompleted == null)) {
                this.ProjectDocumentsOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProjectDocumentsOperOperationCompleted);
            }
            this.InvokeAsync("ProjectDocumentsOper", new object[] {
                        DocumentId,
                        ProjectId,
                        DocumentName,
                        SharedTypeId,
                        FKRoleId,
                        Description,
                        Attachments,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Status,
                        Operation}, this.ProjectDocumentsOperOperationCompleted, userState);
        }
        
        private void OnProjectDocumentsOperOperationCompleted(object arg) {
            if ((this.ProjectDocumentsOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProjectDocumentsOperCompleted(this, new ProjectDocumentsOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCustomDocuments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetCustomDocuments(int Id, string jsonCustomResource, string EmpIdData) {
            object[] results = this.Invoke("SetCustomDocuments", new object[] {
                        Id,
                        jsonCustomResource,
                        EmpIdData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetCustomDocumentsAsync(int Id, string jsonCustomResource, string EmpIdData) {
            this.SetCustomDocumentsAsync(Id, jsonCustomResource, EmpIdData, null);
        }
        
        /// <remarks/>
        public void SetCustomDocumentsAsync(int Id, string jsonCustomResource, string EmpIdData, object userState) {
            if ((this.SetCustomDocumentsOperationCompleted == null)) {
                this.SetCustomDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomDocumentsOperationCompleted);
            }
            this.InvokeAsync("SetCustomDocuments", new object[] {
                        Id,
                        jsonCustomResource,
                        EmpIdData}, this.SetCustomDocumentsOperationCompleted, userState);
        }
        
        private void OnSetCustomDocumentsOperationCompleted(object arg) {
            if ((this.SetCustomDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomDocumentsCompleted(this, new SetCustomDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTaskDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetTaskDetails(string Id, string jsonTaskDetails) {
            object[] results = this.Invoke("SetTaskDetails", new object[] {
                        Id,
                        jsonTaskDetails});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetTaskDetailsAsync(string Id, string jsonTaskDetails) {
            this.SetTaskDetailsAsync(Id, jsonTaskDetails, null);
        }
        
        /// <remarks/>
        public void SetTaskDetailsAsync(string Id, string jsonTaskDetails, object userState) {
            if ((this.SetTaskDetailsOperationCompleted == null)) {
                this.SetTaskDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTaskDetailsOperationCompleted);
            }
            this.InvokeAsync("SetTaskDetails", new object[] {
                        Id,
                        jsonTaskDetails}, this.SetTaskDetailsOperationCompleted, userState);
        }
        
        private void OnSetTaskDetailsOperationCompleted(object arg) {
            if ((this.SetTaskDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTaskDetailsCompleted(this, new SetTaskDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTimeSheetReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTimeSheetReport(string EmpIdData, System.DateTime StartDate, System.DateTime EndDate, int ProjectId, int Offset, int RowCount, int Operation) {
            object[] results = this.Invoke("GetTimeSheetReport", new object[] {
                        EmpIdData,
                        StartDate,
                        EndDate,
                        ProjectId,
                        Offset,
                        RowCount,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTimeSheetReportAsync(string EmpIdData, System.DateTime StartDate, System.DateTime EndDate, int ProjectId, int Offset, int RowCount, int Operation) {
            this.GetTimeSheetReportAsync(EmpIdData, StartDate, EndDate, ProjectId, Offset, RowCount, Operation, null);
        }
        
        /// <remarks/>
        public void GetTimeSheetReportAsync(string EmpIdData, System.DateTime StartDate, System.DateTime EndDate, int ProjectId, int Offset, int RowCount, int Operation, object userState) {
            if ((this.GetTimeSheetReportOperationCompleted == null)) {
                this.GetTimeSheetReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTimeSheetReportOperationCompleted);
            }
            this.InvokeAsync("GetTimeSheetReport", new object[] {
                        EmpIdData,
                        StartDate,
                        EndDate,
                        ProjectId,
                        Offset,
                        RowCount,
                        Operation}, this.GetTimeSheetReportOperationCompleted, userState);
        }
        
        private void OnGetTimeSheetReportOperationCompleted(object arg) {
            if ((this.GetTimeSheetReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTimeSheetReportCompleted(this, new GetTimeSheetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectTaskDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string selectTaskDetails(int EmpId, System.DateTime WeekEnd) {
            object[] results = this.Invoke("selectTaskDetails", new object[] {
                        EmpId,
                        WeekEnd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void selectTaskDetailsAsync(int EmpId, System.DateTime WeekEnd) {
            this.selectTaskDetailsAsync(EmpId, WeekEnd, null);
        }
        
        /// <remarks/>
        public void selectTaskDetailsAsync(int EmpId, System.DateTime WeekEnd, object userState) {
            if ((this.selectTaskDetailsOperationCompleted == null)) {
                this.selectTaskDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectTaskDetailsOperationCompleted);
            }
            this.InvokeAsync("selectTaskDetails", new object[] {
                        EmpId,
                        WeekEnd}, this.selectTaskDetailsOperationCompleted, userState);
        }
        
        private void OnselectTaskDetailsOperationCompleted(object arg) {
            if ((this.selectTaskDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectTaskDetailsCompleted(this, new selectTaskDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailToResource", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMailToResource(int ProjId, string EmpId, int ModEmpId, int Operation) {
            object[] results = this.Invoke("SendMailToResource", new object[] {
                        ProjId,
                        EmpId,
                        ModEmpId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailToResourceAsync(int ProjId, string EmpId, int ModEmpId, int Operation) {
            this.SendMailToResourceAsync(ProjId, EmpId, ModEmpId, Operation, null);
        }
        
        /// <remarks/>
        public void SendMailToResourceAsync(int ProjId, string EmpId, int ModEmpId, int Operation, object userState) {
            if ((this.SendMailToResourceOperationCompleted == null)) {
                this.SendMailToResourceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailToResourceOperationCompleted);
            }
            this.InvokeAsync("SendMailToResource", new object[] {
                        ProjId,
                        EmpId,
                        ModEmpId,
                        Operation}, this.SendMailToResourceOperationCompleted, userState);
        }
        
        private void OnSendMailToResourceOperationCompleted(object arg) {
            if ((this.SendMailToResourceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailToResourceCompleted(this, new SendMailToResourceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportExcelOperations", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportExcelOperations(string taskXml) {
            object[] results = this.Invoke("ImportExcelOperations", new object[] {
                        taskXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportExcelOperationsAsync(string taskXml) {
            this.ImportExcelOperationsAsync(taskXml, null);
        }
        
        /// <remarks/>
        public void ImportExcelOperationsAsync(string taskXml, object userState) {
            if ((this.ImportExcelOperationsOperationCompleted == null)) {
                this.ImportExcelOperationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportExcelOperationsOperationCompleted);
            }
            this.InvokeAsync("ImportExcelOperations", new object[] {
                        taskXml}, this.ImportExcelOperationsOperationCompleted, userState);
        }
        
        private void OnImportExcelOperationsOperationCompleted(object arg) {
            if ((this.ImportExcelOperationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportExcelOperationsCompleted(this, new ImportExcelOperationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateClientCompletedEventHandler(object sender, CreateClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetClientAddressCompletedEventHandler(object sender, SetClientAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetClientAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetClientAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateContactCompletedEventHandler(object sender, CreateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateProjectCompletedEventHandler(object sender, CreateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetMangersForProjectsCompletedEventHandler(object sender, SetMangersForProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetMangersForProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetMangersForProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetResourcesForProjectsCompletedEventHandler(object sender, SetResourcesForProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetResourcesForProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetResourcesForProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateContactCompletedEventHandler(object sender, UpdateContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateClientCompletedEventHandler(object sender, UpdateClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateProjectCompletedEventHandler(object sender, UpdateProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ProjectTaskOperCompletedEventHandler(object sender, ProjectTaskOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProjectTaskOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProjectTaskOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetResourceForTaskCompletedEventHandler(object sender, SetResourceForTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetResourceForTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetResourceForTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ProjectDocumentsOperCompletedEventHandler(object sender, ProjectDocumentsOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProjectDocumentsOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProjectDocumentsOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetCustomDocumentsCompletedEventHandler(object sender, SetCustomDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetCustomDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetCustomDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetTaskDetailsCompletedEventHandler(object sender, SetTaskDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTaskDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTaskDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetTimeSheetReportCompletedEventHandler(object sender, GetTimeSheetReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTimeSheetReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTimeSheetReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void selectTaskDetailsCompletedEventHandler(object sender, selectTaskDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectTaskDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectTaskDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendMailToResourceCompletedEventHandler(object sender, SendMailToResourceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailToResourceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailToResourceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ImportExcelOperationsCompletedEventHandler(object sender, ImportExcelOperationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportExcelOperationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportExcelOperationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591