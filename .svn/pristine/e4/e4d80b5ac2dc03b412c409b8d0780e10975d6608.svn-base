//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NuPortal.NuPortalRequestService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NuPortalRequestServiceSoap", Namespace="http://tempuri.org/")]
    public partial class NuPortalRequestService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchAllOrReimOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAllowanceReimbursementOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateLeaveRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOrCancelMyLeaveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableAvailedLeavesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateRequestStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetForgotPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckIfReqAppliedOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NuPortalRequestService() {
            this.Url = global::NuPortal.Properties.Settings.Default.NuPortal_NuPortalRequestService_NuPortalRequestService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateRequestCompletedEventHandler CreateRequestCompleted;
        
        /// <remarks/>
        public event SearchRequestCompletedEventHandler SearchRequestCompleted;
        
        /// <remarks/>
        public event SearchAllOrReimCompletedEventHandler SearchAllOrReimCompleted;
        
        /// <remarks/>
        public event AddAllowanceReimbursementCompletedEventHandler AddAllowanceReimbursementCompleted;
        
        /// <remarks/>
        public event CancelRequestCompletedEventHandler CancelRequestCompleted;
        
        /// <remarks/>
        public event CreateLeaveRequestCompletedEventHandler CreateLeaveRequestCompleted;
        
        /// <remarks/>
        public event UpdateOrCancelMyLeaveCompletedEventHandler UpdateOrCancelMyLeaveCompleted;
        
        /// <remarks/>
        public event GetAvailableAvailedLeavesCompletedEventHandler GetAvailableAvailedLeavesCompleted;
        
        /// <remarks/>
        public event UpdateRequestStatusCompletedEventHandler UpdateRequestStatusCompleted;
        
        /// <remarks/>
        public event GetForgotPasswordCompletedEventHandler GetForgotPasswordCompleted;
        
        /// <remarks/>
        public event CheckIfReqAppliedCompletedEventHandler CheckIfReqAppliedCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateRequest(string RequestText, int RequestType, string AttachmentUrl, System.DateTime RequestedDate, System.DateTime RequestedToDate, System.DateTime CreatedDate, int CreatedEmpId, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            object[] results = this.Invoke("CreateRequest", new object[] {
                        RequestText,
                        RequestType,
                        AttachmentUrl,
                        RequestedDate,
                        RequestedToDate,
                        CreatedDate,
                        CreatedEmpId,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRequestAsync(string RequestText, int RequestType, string AttachmentUrl, System.DateTime RequestedDate, System.DateTime RequestedToDate, System.DateTime CreatedDate, int CreatedEmpId, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            this.CreateRequestAsync(RequestText, RequestType, AttachmentUrl, RequestedDate, RequestedToDate, CreatedDate, CreatedEmpId, ModifiedDate, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void CreateRequestAsync(string RequestText, int RequestType, string AttachmentUrl, System.DateTime RequestedDate, System.DateTime RequestedToDate, System.DateTime CreatedDate, int CreatedEmpId, System.DateTime ModifiedDate, int ModifiedEmpId, int Status, object userState) {
            if ((this.CreateRequestOperationCompleted == null)) {
                this.CreateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRequestOperationCompleted);
            }
            this.InvokeAsync("CreateRequest", new object[] {
                        RequestText,
                        RequestType,
                        AttachmentUrl,
                        RequestedDate,
                        RequestedToDate,
                        CreatedDate,
                        CreatedEmpId,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status}, this.CreateRequestOperationCompleted, userState);
        }
        
        private void OnCreateRequestOperationCompleted(object arg) {
            if ((this.CreateRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRequestCompleted(this, new CreateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchRequest(string RequestText, string RequestType, string RequestedDate, string GroupName, string ReqStatus, int Requester) {
            object[] results = this.Invoke("SearchRequest", new object[] {
                        RequestText,
                        RequestType,
                        RequestedDate,
                        GroupName,
                        ReqStatus,
                        Requester});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchRequestAsync(string RequestText, string RequestType, string RequestedDate, string GroupName, string ReqStatus, int Requester) {
            this.SearchRequestAsync(RequestText, RequestType, RequestedDate, GroupName, ReqStatus, Requester, null);
        }
        
        /// <remarks/>
        public void SearchRequestAsync(string RequestText, string RequestType, string RequestedDate, string GroupName, string ReqStatus, int Requester, object userState) {
            if ((this.SearchRequestOperationCompleted == null)) {
                this.SearchRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchRequestOperationCompleted);
            }
            this.InvokeAsync("SearchRequest", new object[] {
                        RequestText,
                        RequestType,
                        RequestedDate,
                        GroupName,
                        ReqStatus,
                        Requester}, this.SearchRequestOperationCompleted, userState);
        }
        
        private void OnSearchRequestOperationCompleted(object arg) {
            if ((this.SearchRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchRequestCompleted(this, new SearchRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchAllOrReim", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchAllOrReim(float amount, System.DateTime StartDate, System.DateTime EndDate, int TicketStatusId, string Description, int Requester, int CategoryTypeId, int CategoryId) {
            object[] results = this.Invoke("SearchAllOrReim", new object[] {
                        amount,
                        StartDate,
                        EndDate,
                        TicketStatusId,
                        Description,
                        Requester,
                        CategoryTypeId,
                        CategoryId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchAllOrReimAsync(float amount, System.DateTime StartDate, System.DateTime EndDate, int TicketStatusId, string Description, int Requester, int CategoryTypeId, int CategoryId) {
            this.SearchAllOrReimAsync(amount, StartDate, EndDate, TicketStatusId, Description, Requester, CategoryTypeId, CategoryId, null);
        }
        
        /// <remarks/>
        public void SearchAllOrReimAsync(float amount, System.DateTime StartDate, System.DateTime EndDate, int TicketStatusId, string Description, int Requester, int CategoryTypeId, int CategoryId, object userState) {
            if ((this.SearchAllOrReimOperationCompleted == null)) {
                this.SearchAllOrReimOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchAllOrReimOperationCompleted);
            }
            this.InvokeAsync("SearchAllOrReim", new object[] {
                        amount,
                        StartDate,
                        EndDate,
                        TicketStatusId,
                        Description,
                        Requester,
                        CategoryTypeId,
                        CategoryId}, this.SearchAllOrReimOperationCompleted, userState);
        }
        
        private void OnSearchAllOrReimOperationCompleted(object arg) {
            if ((this.SearchAllOrReimCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchAllOrReimCompleted(this, new SearchAllOrReimCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAllowanceReimbursement", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAllowanceReimbursement(float Amount, string Attachments, System.DateTime StartDate, System.DateTime EndDate, string Description, int CategoryId, int CategoryTypeId, System.DateTime CreatedDate, int CreatedEmpId, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            object[] results = this.Invoke("AddAllowanceReimbursement", new object[] {
                        Amount,
                        Attachments,
                        StartDate,
                        EndDate,
                        Description,
                        CategoryId,
                        CategoryTypeId,
                        CreatedDate,
                        CreatedEmpId,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAllowanceReimbursementAsync(float Amount, string Attachments, System.DateTime StartDate, System.DateTime EndDate, string Description, int CategoryId, int CategoryTypeId, System.DateTime CreatedDate, int CreatedEmpId, System.DateTime ModifiedDate, int ModifiedEmpId, int Status) {
            this.AddAllowanceReimbursementAsync(Amount, Attachments, StartDate, EndDate, Description, CategoryId, CategoryTypeId, CreatedDate, CreatedEmpId, ModifiedDate, ModifiedEmpId, Status, null);
        }
        
        /// <remarks/>
        public void AddAllowanceReimbursementAsync(float Amount, string Attachments, System.DateTime StartDate, System.DateTime EndDate, string Description, int CategoryId, int CategoryTypeId, System.DateTime CreatedDate, int CreatedEmpId, System.DateTime ModifiedDate, int ModifiedEmpId, int Status, object userState) {
            if ((this.AddAllowanceReimbursementOperationCompleted == null)) {
                this.AddAllowanceReimbursementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAllowanceReimbursementOperationCompleted);
            }
            this.InvokeAsync("AddAllowanceReimbursement", new object[] {
                        Amount,
                        Attachments,
                        StartDate,
                        EndDate,
                        Description,
                        CategoryId,
                        CategoryTypeId,
                        CreatedDate,
                        CreatedEmpId,
                        ModifiedDate,
                        ModifiedEmpId,
                        Status}, this.AddAllowanceReimbursementOperationCompleted, userState);
        }
        
        private void OnAddAllowanceReimbursementOperationCompleted(object arg) {
            if ((this.AddAllowanceReimbursementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAllowanceReimbursementCompleted(this, new AddAllowanceReimbursementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CancelRequest(int RequestId, int Operation) {
            object[] results = this.Invoke("CancelRequest", new object[] {
                        RequestId,
                        Operation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CancelRequestAsync(int RequestId, int Operation) {
            this.CancelRequestAsync(RequestId, Operation, null);
        }
        
        /// <remarks/>
        public void CancelRequestAsync(int RequestId, int Operation, object userState) {
            if ((this.CancelRequestOperationCompleted == null)) {
                this.CancelRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRequestOperationCompleted);
            }
            this.InvokeAsync("CancelRequest", new object[] {
                        RequestId,
                        Operation}, this.CancelRequestOperationCompleted, userState);
        }
        
        private void OnCancelRequestOperationCompleted(object arg) {
            if ((this.CancelRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRequestCompleted(this, new CancelRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateLeaveRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateLeaveRequest(int EmpId, int EmpIdRequester, int EmpAssignedTo, System.DateTime LeaveStartDate, System.DateTime LeaveEndDate, int StatusId, int FKLeaveTransId, int LeaveTypeId, int LeaveAppliedDays, int CreatedEmpId, int ModifiedEmpId, string Reason, int companyId, int IsCreate) {
            object[] results = this.Invoke("CreateLeaveRequest", new object[] {
                        EmpId,
                        EmpIdRequester,
                        EmpAssignedTo,
                        LeaveStartDate,
                        LeaveEndDate,
                        StatusId,
                        FKLeaveTransId,
                        LeaveTypeId,
                        LeaveAppliedDays,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Reason,
                        companyId,
                        IsCreate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateLeaveRequestAsync(int EmpId, int EmpIdRequester, int EmpAssignedTo, System.DateTime LeaveStartDate, System.DateTime LeaveEndDate, int StatusId, int FKLeaveTransId, int LeaveTypeId, int LeaveAppliedDays, int CreatedEmpId, int ModifiedEmpId, string Reason, int companyId, int IsCreate) {
            this.CreateLeaveRequestAsync(EmpId, EmpIdRequester, EmpAssignedTo, LeaveStartDate, LeaveEndDate, StatusId, FKLeaveTransId, LeaveTypeId, LeaveAppliedDays, CreatedEmpId, ModifiedEmpId, Reason, companyId, IsCreate, null);
        }
        
        /// <remarks/>
        public void CreateLeaveRequestAsync(int EmpId, int EmpIdRequester, int EmpAssignedTo, System.DateTime LeaveStartDate, System.DateTime LeaveEndDate, int StatusId, int FKLeaveTransId, int LeaveTypeId, int LeaveAppliedDays, int CreatedEmpId, int ModifiedEmpId, string Reason, int companyId, int IsCreate, object userState) {
            if ((this.CreateLeaveRequestOperationCompleted == null)) {
                this.CreateLeaveRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateLeaveRequestOperationCompleted);
            }
            this.InvokeAsync("CreateLeaveRequest", new object[] {
                        EmpId,
                        EmpIdRequester,
                        EmpAssignedTo,
                        LeaveStartDate,
                        LeaveEndDate,
                        StatusId,
                        FKLeaveTransId,
                        LeaveTypeId,
                        LeaveAppliedDays,
                        CreatedEmpId,
                        ModifiedEmpId,
                        Reason,
                        companyId,
                        IsCreate}, this.CreateLeaveRequestOperationCompleted, userState);
        }
        
        private void OnCreateLeaveRequestOperationCompleted(object arg) {
            if ((this.CreateLeaveRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateLeaveRequestCompleted(this, new CreateLeaveRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOrCancelMyLeave", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateOrCancelMyLeave(int RequestId, int EmpIdRequester, int CompanyId, int LeaveTypeId, int Operation, int StatusId) {
            object[] results = this.Invoke("UpdateOrCancelMyLeave", new object[] {
                        RequestId,
                        EmpIdRequester,
                        CompanyId,
                        LeaveTypeId,
                        Operation,
                        StatusId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOrCancelMyLeaveAsync(int RequestId, int EmpIdRequester, int CompanyId, int LeaveTypeId, int Operation, int StatusId) {
            this.UpdateOrCancelMyLeaveAsync(RequestId, EmpIdRequester, CompanyId, LeaveTypeId, Operation, StatusId, null);
        }
        
        /// <remarks/>
        public void UpdateOrCancelMyLeaveAsync(int RequestId, int EmpIdRequester, int CompanyId, int LeaveTypeId, int Operation, int StatusId, object userState) {
            if ((this.UpdateOrCancelMyLeaveOperationCompleted == null)) {
                this.UpdateOrCancelMyLeaveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrCancelMyLeaveOperationCompleted);
            }
            this.InvokeAsync("UpdateOrCancelMyLeave", new object[] {
                        RequestId,
                        EmpIdRequester,
                        CompanyId,
                        LeaveTypeId,
                        Operation,
                        StatusId}, this.UpdateOrCancelMyLeaveOperationCompleted, userState);
        }
        
        private void OnUpdateOrCancelMyLeaveOperationCompleted(object arg) {
            if ((this.UpdateOrCancelMyLeaveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrCancelMyLeaveCompleted(this, new UpdateOrCancelMyLeaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableAvailedLeaves", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableAvailedLeaves(int CompanyId, int EmpId) {
            object[] results = this.Invoke("GetAvailableAvailedLeaves", new object[] {
                        CompanyId,
                        EmpId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableAvailedLeavesAsync(int CompanyId, int EmpId) {
            this.GetAvailableAvailedLeavesAsync(CompanyId, EmpId, null);
        }
        
        /// <remarks/>
        public void GetAvailableAvailedLeavesAsync(int CompanyId, int EmpId, object userState) {
            if ((this.GetAvailableAvailedLeavesOperationCompleted == null)) {
                this.GetAvailableAvailedLeavesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableAvailedLeavesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableAvailedLeaves", new object[] {
                        CompanyId,
                        EmpId}, this.GetAvailableAvailedLeavesOperationCompleted, userState);
        }
        
        private void OnGetAvailableAvailedLeavesOperationCompleted(object arg) {
            if ((this.GetAvailableAvailedLeavesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableAvailedLeavesCompleted(this, new GetAvailableAvailedLeavesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateRequestStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateRequestStatus(int RequestId, int EmpId, int StatusId, int Operation) {
            object[] results = this.Invoke("UpdateRequestStatus", new object[] {
                        RequestId,
                        EmpId,
                        StatusId,
                        Operation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateRequestStatusAsync(int RequestId, int EmpId, int StatusId, int Operation) {
            this.UpdateRequestStatusAsync(RequestId, EmpId, StatusId, Operation, null);
        }
        
        /// <remarks/>
        public void UpdateRequestStatusAsync(int RequestId, int EmpId, int StatusId, int Operation, object userState) {
            if ((this.UpdateRequestStatusOperationCompleted == null)) {
                this.UpdateRequestStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateRequestStatusOperationCompleted);
            }
            this.InvokeAsync("UpdateRequestStatus", new object[] {
                        RequestId,
                        EmpId,
                        StatusId,
                        Operation}, this.UpdateRequestStatusOperationCompleted, userState);
        }
        
        private void OnUpdateRequestStatusOperationCompleted(object arg) {
            if ((this.UpdateRequestStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateRequestStatusCompleted(this, new UpdateRequestStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetForgotPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetForgotPassword(string UserName, int Operation) {
            object[] results = this.Invoke("GetForgotPassword", new object[] {
                        UserName,
                        Operation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetForgotPasswordAsync(string UserName, int Operation) {
            this.GetForgotPasswordAsync(UserName, Operation, null);
        }
        
        /// <remarks/>
        public void GetForgotPasswordAsync(string UserName, int Operation, object userState) {
            if ((this.GetForgotPasswordOperationCompleted == null)) {
                this.GetForgotPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetForgotPasswordOperationCompleted);
            }
            this.InvokeAsync("GetForgotPassword", new object[] {
                        UserName,
                        Operation}, this.GetForgotPasswordOperationCompleted, userState);
        }
        
        private void OnGetForgotPasswordOperationCompleted(object arg) {
            if ((this.GetForgotPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetForgotPasswordCompleted(this, new GetForgotPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckIfReqApplied", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckIfReqApplied(System.DateTime RequestedTo, int EmpId, int RequestTypeId, int Operation) {
            object[] results = this.Invoke("CheckIfReqApplied", new object[] {
                        RequestedTo,
                        EmpId,
                        RequestTypeId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckIfReqAppliedAsync(System.DateTime RequestedTo, int EmpId, int RequestTypeId, int Operation) {
            this.CheckIfReqAppliedAsync(RequestedTo, EmpId, RequestTypeId, Operation, null);
        }
        
        /// <remarks/>
        public void CheckIfReqAppliedAsync(System.DateTime RequestedTo, int EmpId, int RequestTypeId, int Operation, object userState) {
            if ((this.CheckIfReqAppliedOperationCompleted == null)) {
                this.CheckIfReqAppliedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckIfReqAppliedOperationCompleted);
            }
            this.InvokeAsync("CheckIfReqApplied", new object[] {
                        RequestedTo,
                        EmpId,
                        RequestTypeId,
                        Operation}, this.CheckIfReqAppliedOperationCompleted, userState);
        }
        
        private void OnCheckIfReqAppliedOperationCompleted(object arg) {
            if ((this.CheckIfReqAppliedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckIfReqAppliedCompleted(this, new CheckIfReqAppliedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateRequestCompletedEventHandler(object sender, CreateRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchRequestCompletedEventHandler(object sender, SearchRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchAllOrReimCompletedEventHandler(object sender, SearchAllOrReimCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchAllOrReimCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchAllOrReimCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddAllowanceReimbursementCompletedEventHandler(object sender, AddAllowanceReimbursementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAllowanceReimbursementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAllowanceReimbursementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelRequestCompletedEventHandler(object sender, CancelRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateLeaveRequestCompletedEventHandler(object sender, CreateLeaveRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateLeaveRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateLeaveRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateOrCancelMyLeaveCompletedEventHandler(object sender, UpdateOrCancelMyLeaveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrCancelMyLeaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOrCancelMyLeaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAvailableAvailedLeavesCompletedEventHandler(object sender, GetAvailableAvailedLeavesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableAvailedLeavesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableAvailedLeavesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateRequestStatusCompletedEventHandler(object sender, UpdateRequestStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateRequestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateRequestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetForgotPasswordCompletedEventHandler(object sender, GetForgotPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetForgotPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetForgotPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckIfReqAppliedCompletedEventHandler(object sender, CheckIfReqAppliedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckIfReqAppliedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckIfReqAppliedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591