//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NuPortal.NuPortalDBService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NuPortalServiceSoap", Namespace="http://tempuri.org/")]
    public partial class NuPortalService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback LoginInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDDListBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectGridInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectDetailsByMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFilterForGridOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NuPortalService() {
            this.Url = global::NuPortal.Properties.Settings.Default.NuPortal_NuPortalDBService_NuPortalService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event LoginInfoCompletedEventHandler LoginInfoCompleted;
        
        /// <remarks/>
        public event GetDDListBoxCompletedEventHandler GetDDListBoxCompleted;
        
        /// <remarks/>
        public event SelectGridInfoCompletedEventHandler SelectGridInfoCompleted;
        
        /// <remarks/>
        public event SelectDetailsByMonthCompletedEventHandler SelectDetailsByMonthCompleted;
        
        /// <remarks/>
        public event CancelItemCompletedEventHandler CancelItemCompleted;
        
        /// <remarks/>
        public event GetFilterForGridCompletedEventHandler GetFilterForGridCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoginInfo(string UserName, string Password, int Operation) {
            object[] results = this.Invoke("LoginInfo", new object[] {
                        UserName,
                        Password,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginInfoAsync(string UserName, string Password, int Operation) {
            this.LoginInfoAsync(UserName, Password, Operation, null);
        }
        
        /// <remarks/>
        public void LoginInfoAsync(string UserName, string Password, int Operation, object userState) {
            if ((this.LoginInfoOperationCompleted == null)) {
                this.LoginInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginInfoOperationCompleted);
            }
            this.InvokeAsync("LoginInfo", new object[] {
                        UserName,
                        Password,
                        Operation}, this.LoginInfoOperationCompleted, userState);
        }
        
        private void OnLoginInfoOperationCompleted(object arg) {
            if ((this.LoginInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginInfoCompleted(this, new LoginInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDDListBox", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDDListBox(int Id, int Operation) {
            object[] results = this.Invoke("GetDDListBox", new object[] {
                        Id,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDDListBoxAsync(int Id, int Operation) {
            this.GetDDListBoxAsync(Id, Operation, null);
        }
        
        /// <remarks/>
        public void GetDDListBoxAsync(int Id, int Operation, object userState) {
            if ((this.GetDDListBoxOperationCompleted == null)) {
                this.GetDDListBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDDListBoxOperationCompleted);
            }
            this.InvokeAsync("GetDDListBox", new object[] {
                        Id,
                        Operation}, this.GetDDListBoxOperationCompleted, userState);
        }
        
        private void OnGetDDListBoxOperationCompleted(object arg) {
            if ((this.GetDDListBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDDListBoxCompleted(this, new GetDDListBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectGridInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectGridInfo(int Id, int Operation) {
            object[] results = this.Invoke("SelectGridInfo", new object[] {
                        Id,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SelectGridInfoAsync(int Id, int Operation) {
            this.SelectGridInfoAsync(Id, Operation, null);
        }
        
        /// <remarks/>
        public void SelectGridInfoAsync(int Id, int Operation, object userState) {
            if ((this.SelectGridInfoOperationCompleted == null)) {
                this.SelectGridInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectGridInfoOperationCompleted);
            }
            this.InvokeAsync("SelectGridInfo", new object[] {
                        Id,
                        Operation}, this.SelectGridInfoOperationCompleted, userState);
        }
        
        private void OnSelectGridInfoOperationCompleted(object arg) {
            if ((this.SelectGridInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectGridInfoCompleted(this, new SelectGridInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectDetailsByMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SelectDetailsByMonth(int EmpId, int Month, int Year, int Operation) {
            object[] results = this.Invoke("SelectDetailsByMonth", new object[] {
                        EmpId,
                        Month,
                        Year,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SelectDetailsByMonthAsync(int EmpId, int Month, int Year, int Operation) {
            this.SelectDetailsByMonthAsync(EmpId, Month, Year, Operation, null);
        }
        
        /// <remarks/>
        public void SelectDetailsByMonthAsync(int EmpId, int Month, int Year, int Operation, object userState) {
            if ((this.SelectDetailsByMonthOperationCompleted == null)) {
                this.SelectDetailsByMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectDetailsByMonthOperationCompleted);
            }
            this.InvokeAsync("SelectDetailsByMonth", new object[] {
                        EmpId,
                        Month,
                        Year,
                        Operation}, this.SelectDetailsByMonthOperationCompleted, userState);
        }
        
        private void OnSelectDetailsByMonthOperationCompleted(object arg) {
            if ((this.SelectDetailsByMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectDetailsByMonthCompleted(this, new SelectDetailsByMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelItem(int Id, int EmpId, int Operation) {
            object[] results = this.Invoke("CancelItem", new object[] {
                        Id,
                        EmpId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelItemAsync(int Id, int EmpId, int Operation) {
            this.CancelItemAsync(Id, EmpId, Operation, null);
        }
        
        /// <remarks/>
        public void CancelItemAsync(int Id, int EmpId, int Operation, object userState) {
            if ((this.CancelItemOperationCompleted == null)) {
                this.CancelItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelItemOperationCompleted);
            }
            this.InvokeAsync("CancelItem", new object[] {
                        Id,
                        EmpId,
                        Operation}, this.CancelItemOperationCompleted, userState);
        }
        
        private void OnCancelItemOperationCompleted(object arg) {
            if ((this.CancelItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelItemCompleted(this, new CancelItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFilterForGrid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFilterForGrid(string JsonData, int EmpId, int Offset, int RowCount, int Operation) {
            object[] results = this.Invoke("GetFilterForGrid", new object[] {
                        JsonData,
                        EmpId,
                        Offset,
                        RowCount,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFilterForGridAsync(string JsonData, int EmpId, int Offset, int RowCount, int Operation) {
            this.GetFilterForGridAsync(JsonData, EmpId, Offset, RowCount, Operation, null);
        }
        
        /// <remarks/>
        public void GetFilterForGridAsync(string JsonData, int EmpId, int Offset, int RowCount, int Operation, object userState) {
            if ((this.GetFilterForGridOperationCompleted == null)) {
                this.GetFilterForGridOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilterForGridOperationCompleted);
            }
            this.InvokeAsync("GetFilterForGrid", new object[] {
                        JsonData,
                        EmpId,
                        Offset,
                        RowCount,
                        Operation}, this.GetFilterForGridOperationCompleted, userState);
        }
        
        private void OnGetFilterForGridOperationCompleted(object arg) {
            if ((this.GetFilterForGridCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilterForGridCompleted(this, new GetFilterForGridCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePassword(string OldPassword, string NewPassword, int EmpId, int Operation) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        OldPassword,
                        NewPassword,
                        EmpId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string OldPassword, string NewPassword, int EmpId, int Operation) {
            this.ChangePasswordAsync(OldPassword, NewPassword, EmpId, Operation, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string OldPassword, string NewPassword, int EmpId, int Operation, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        OldPassword,
                        NewPassword,
                        EmpId,
                        Operation}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void LoginInfoCompletedEventHandler(object sender, LoginInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDDListBoxCompletedEventHandler(object sender, GetDDListBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDDListBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDDListBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SelectGridInfoCompletedEventHandler(object sender, SelectGridInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectGridInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectGridInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SelectDetailsByMonthCompletedEventHandler(object sender, SelectDetailsByMonthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectDetailsByMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectDetailsByMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelItemCompletedEventHandler(object sender, CancelItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFilterForGridCompletedEventHandler(object sender, GetFilterForGridCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilterForGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFilterForGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591