//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NuPortal.NuPortalRecruitmentService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RecruitmentSoap", Namespace="http://tempuri.org/")]
    public partial class Recruitment : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback OpeningsOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewApplicantOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewAllApplicantOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScheduleInterviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetInterviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterviewAssessmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplicantStatusUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TimesheetReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback InterviewScheduleUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateJoinedEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UspUpdateJoinedEmpolyeeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Recruitment() {
            this.Url = global::NuPortal.Properties.Settings.Default.NuPortal_NuPortalRecruitmentService_Recruitment;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event OpeningsOperCompletedEventHandler OpeningsOperCompleted;
        
        /// <remarks/>
        public event NewApplicantOperCompletedEventHandler NewApplicantOperCompleted;
        
        /// <remarks/>
        public event NewAllApplicantOperCompletedEventHandler NewAllApplicantOperCompleted;
        
        /// <remarks/>
        public event ScheduleInterviewCompletedEventHandler ScheduleInterviewCompleted;
        
        /// <remarks/>
        public event SetInterviewCompletedEventHandler SetInterviewCompleted;
        
        /// <remarks/>
        public event InterviewAssessmentCompletedEventHandler InterviewAssessmentCompleted;
        
        /// <remarks/>
        public event ApplicantStatusUpdateCompletedEventHandler ApplicantStatusUpdateCompleted;
        
        /// <remarks/>
        public event TimesheetReportCompletedEventHandler TimesheetReportCompleted;
        
        /// <remarks/>
        public event InterviewScheduleUpdateCompletedEventHandler InterviewScheduleUpdateCompleted;
        
        /// <remarks/>
        public event CreateJoinedEmployeeCompletedEventHandler CreateJoinedEmployeeCompleted;
        
        /// <remarks/>
        public event UspUpdateJoinedEmpolyeeCompletedEventHandler UspUpdateJoinedEmpolyeeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OpeningsOper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OpeningsOper(
                    int openingId, 
                    string Attachments, 
                    string Certification, 
                    string City, 
                    string ContractPeriod, 
                    string Country, 
                    string CTC, 
                    string Domain, 
                    string ExperienceRequired, 
                    int FKDepartment, 
                    int FKManager, 
                    int FKRecruiter, 
                    string Role, 
                    string Industry, 
                    string JobDescription, 
                    int JobOpeningStatus, 
                    string JobTitle, 
                    string JobType, 
                    int NOOfVacancy, 
                    string Skills, 
                    string State, 
                    string Technologies, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    int Status, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    System.DateTime EndDate, 
                    System.DateTime StartDate, 
                    int FKCompanyId, 
                    int Operation) {
            object[] results = this.Invoke("OpeningsOper", new object[] {
                        openingId,
                        Attachments,
                        Certification,
                        City,
                        ContractPeriod,
                        Country,
                        CTC,
                        Domain,
                        ExperienceRequired,
                        FKDepartment,
                        FKManager,
                        FKRecruiter,
                        Role,
                        Industry,
                        JobDescription,
                        JobOpeningStatus,
                        JobTitle,
                        JobType,
                        NOOfVacancy,
                        Skills,
                        State,
                        Technologies,
                        CreatedEmpID,
                        ModifiedEmpID,
                        Status,
                        CreatedDate,
                        ModifiedDate,
                        EndDate,
                        StartDate,
                        FKCompanyId,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OpeningsOperAsync(
                    int openingId, 
                    string Attachments, 
                    string Certification, 
                    string City, 
                    string ContractPeriod, 
                    string Country, 
                    string CTC, 
                    string Domain, 
                    string ExperienceRequired, 
                    int FKDepartment, 
                    int FKManager, 
                    int FKRecruiter, 
                    string Role, 
                    string Industry, 
                    string JobDescription, 
                    int JobOpeningStatus, 
                    string JobTitle, 
                    string JobType, 
                    int NOOfVacancy, 
                    string Skills, 
                    string State, 
                    string Technologies, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    int Status, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    System.DateTime EndDate, 
                    System.DateTime StartDate, 
                    int FKCompanyId, 
                    int Operation) {
            this.OpeningsOperAsync(openingId, Attachments, Certification, City, ContractPeriod, Country, CTC, Domain, ExperienceRequired, FKDepartment, FKManager, FKRecruiter, Role, Industry, JobDescription, JobOpeningStatus, JobTitle, JobType, NOOfVacancy, Skills, State, Technologies, CreatedEmpID, ModifiedEmpID, Status, CreatedDate, ModifiedDate, EndDate, StartDate, FKCompanyId, Operation, null);
        }
        
        /// <remarks/>
        public void OpeningsOperAsync(
                    int openingId, 
                    string Attachments, 
                    string Certification, 
                    string City, 
                    string ContractPeriod, 
                    string Country, 
                    string CTC, 
                    string Domain, 
                    string ExperienceRequired, 
                    int FKDepartment, 
                    int FKManager, 
                    int FKRecruiter, 
                    string Role, 
                    string Industry, 
                    string JobDescription, 
                    int JobOpeningStatus, 
                    string JobTitle, 
                    string JobType, 
                    int NOOfVacancy, 
                    string Skills, 
                    string State, 
                    string Technologies, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    int Status, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    System.DateTime EndDate, 
                    System.DateTime StartDate, 
                    int FKCompanyId, 
                    int Operation, 
                    object userState) {
            if ((this.OpeningsOperOperationCompleted == null)) {
                this.OpeningsOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOpeningsOperOperationCompleted);
            }
            this.InvokeAsync("OpeningsOper", new object[] {
                        openingId,
                        Attachments,
                        Certification,
                        City,
                        ContractPeriod,
                        Country,
                        CTC,
                        Domain,
                        ExperienceRequired,
                        FKDepartment,
                        FKManager,
                        FKRecruiter,
                        Role,
                        Industry,
                        JobDescription,
                        JobOpeningStatus,
                        JobTitle,
                        JobType,
                        NOOfVacancy,
                        Skills,
                        State,
                        Technologies,
                        CreatedEmpID,
                        ModifiedEmpID,
                        Status,
                        CreatedDate,
                        ModifiedDate,
                        EndDate,
                        StartDate,
                        FKCompanyId,
                        Operation}, this.OpeningsOperOperationCompleted, userState);
        }
        
        private void OnOpeningsOperOperationCompleted(object arg) {
            if ((this.OpeningsOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OpeningsOperCompleted(this, new OpeningsOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NewApplicantOper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewApplicantOper(
                    int NewApplicantId, 
                    string AdditionalInfo, 
                    string Address, 
                    int AssignedBy, 
                    int AssignedTo, 
                    string Attachments, 
                    string city, 
                    string Comments, 
                    string Country, 
                    string CurrentCTC, 
                    string CurrentEmployer, 
                    string CurrentJobTitle, 
                    string EmailId, 
                    string ExpectedCTC, 
                    int ExperianceinMonths, 
                    int FKApplicantIdStatus, 
                    int FKOpeningsId, 
                    string HighestQualification, 
                    string LinkedInID, 
                    string MobileNo, 
                    string Name, 
                    string Skills, 
                    string SkypeID, 
                    string State, 
                    string Street, 
                    int ZipCode, 
                    string Technologies, 
                    string TwitterID, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int Status, 
                    int Operation) {
            object[] results = this.Invoke("NewApplicantOper", new object[] {
                        NewApplicantId,
                        AdditionalInfo,
                        Address,
                        AssignedBy,
                        AssignedTo,
                        Attachments,
                        city,
                        Comments,
                        Country,
                        CurrentCTC,
                        CurrentEmployer,
                        CurrentJobTitle,
                        EmailId,
                        ExpectedCTC,
                        ExperianceinMonths,
                        FKApplicantIdStatus,
                        FKOpeningsId,
                        HighestQualification,
                        LinkedInID,
                        MobileNo,
                        Name,
                        Skills,
                        SkypeID,
                        State,
                        Street,
                        ZipCode,
                        Technologies,
                        TwitterID,
                        CreatedEmpID,
                        ModifiedEmpID,
                        CreatedDate,
                        ModifiedDate,
                        Status,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewApplicantOperAsync(
                    int NewApplicantId, 
                    string AdditionalInfo, 
                    string Address, 
                    int AssignedBy, 
                    int AssignedTo, 
                    string Attachments, 
                    string city, 
                    string Comments, 
                    string Country, 
                    string CurrentCTC, 
                    string CurrentEmployer, 
                    string CurrentJobTitle, 
                    string EmailId, 
                    string ExpectedCTC, 
                    int ExperianceinMonths, 
                    int FKApplicantIdStatus, 
                    int FKOpeningsId, 
                    string HighestQualification, 
                    string LinkedInID, 
                    string MobileNo, 
                    string Name, 
                    string Skills, 
                    string SkypeID, 
                    string State, 
                    string Street, 
                    int ZipCode, 
                    string Technologies, 
                    string TwitterID, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int Status, 
                    int Operation) {
            this.NewApplicantOperAsync(NewApplicantId, AdditionalInfo, Address, AssignedBy, AssignedTo, Attachments, city, Comments, Country, CurrentCTC, CurrentEmployer, CurrentJobTitle, EmailId, ExpectedCTC, ExperianceinMonths, FKApplicantIdStatus, FKOpeningsId, HighestQualification, LinkedInID, MobileNo, Name, Skills, SkypeID, State, Street, ZipCode, Technologies, TwitterID, CreatedEmpID, ModifiedEmpID, CreatedDate, ModifiedDate, Status, Operation, null);
        }
        
        /// <remarks/>
        public void NewApplicantOperAsync(
                    int NewApplicantId, 
                    string AdditionalInfo, 
                    string Address, 
                    int AssignedBy, 
                    int AssignedTo, 
                    string Attachments, 
                    string city, 
                    string Comments, 
                    string Country, 
                    string CurrentCTC, 
                    string CurrentEmployer, 
                    string CurrentJobTitle, 
                    string EmailId, 
                    string ExpectedCTC, 
                    int ExperianceinMonths, 
                    int FKApplicantIdStatus, 
                    int FKOpeningsId, 
                    string HighestQualification, 
                    string LinkedInID, 
                    string MobileNo, 
                    string Name, 
                    string Skills, 
                    string SkypeID, 
                    string State, 
                    string Street, 
                    int ZipCode, 
                    string Technologies, 
                    string TwitterID, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int Status, 
                    int Operation, 
                    object userState) {
            if ((this.NewApplicantOperOperationCompleted == null)) {
                this.NewApplicantOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewApplicantOperOperationCompleted);
            }
            this.InvokeAsync("NewApplicantOper", new object[] {
                        NewApplicantId,
                        AdditionalInfo,
                        Address,
                        AssignedBy,
                        AssignedTo,
                        Attachments,
                        city,
                        Comments,
                        Country,
                        CurrentCTC,
                        CurrentEmployer,
                        CurrentJobTitle,
                        EmailId,
                        ExpectedCTC,
                        ExperianceinMonths,
                        FKApplicantIdStatus,
                        FKOpeningsId,
                        HighestQualification,
                        LinkedInID,
                        MobileNo,
                        Name,
                        Skills,
                        SkypeID,
                        State,
                        Street,
                        ZipCode,
                        Technologies,
                        TwitterID,
                        CreatedEmpID,
                        ModifiedEmpID,
                        CreatedDate,
                        ModifiedDate,
                        Status,
                        Operation}, this.NewApplicantOperOperationCompleted, userState);
        }
        
        private void OnNewApplicantOperOperationCompleted(object arg) {
            if ((this.NewApplicantOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewApplicantOperCompleted(this, new NewApplicantOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NewAllApplicantOper", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewAllApplicantOper(
                    int AllApplicantId, 
                    string AdditionalInfo, 
                    string Address, 
                    int AssignedTo, 
                    string Attachments, 
                    string city, 
                    string Comments, 
                    string Country, 
                    string CurrentCTC, 
                    string CurrentEmployer, 
                    string CurrentJobTitle, 
                    string EmailId, 
                    string ExpectedCTC, 
                    int ExperianceinMonths, 
                    int FKApplicantIdStatus, 
                    int FKCompanyId, 
                    string HighestQualification, 
                    string LinkedInID, 
                    string MobileNo, 
                    string Name, 
                    string Skills, 
                    string SkypeID, 
                    string State, 
                    string Street, 
                    int ZipCode, 
                    string Technologies, 
                    string TwitterID, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    int Status, 
                    int Operation) {
            object[] results = this.Invoke("NewAllApplicantOper", new object[] {
                        AllApplicantId,
                        AdditionalInfo,
                        Address,
                        AssignedTo,
                        Attachments,
                        city,
                        Comments,
                        Country,
                        CurrentCTC,
                        CurrentEmployer,
                        CurrentJobTitle,
                        EmailId,
                        ExpectedCTC,
                        ExperianceinMonths,
                        FKApplicantIdStatus,
                        FKCompanyId,
                        HighestQualification,
                        LinkedInID,
                        MobileNo,
                        Name,
                        Skills,
                        SkypeID,
                        State,
                        Street,
                        ZipCode,
                        Technologies,
                        TwitterID,
                        CreatedEmpID,
                        ModifiedEmpID,
                        Status,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewAllApplicantOperAsync(
                    int AllApplicantId, 
                    string AdditionalInfo, 
                    string Address, 
                    int AssignedTo, 
                    string Attachments, 
                    string city, 
                    string Comments, 
                    string Country, 
                    string CurrentCTC, 
                    string CurrentEmployer, 
                    string CurrentJobTitle, 
                    string EmailId, 
                    string ExpectedCTC, 
                    int ExperianceinMonths, 
                    int FKApplicantIdStatus, 
                    int FKCompanyId, 
                    string HighestQualification, 
                    string LinkedInID, 
                    string MobileNo, 
                    string Name, 
                    string Skills, 
                    string SkypeID, 
                    string State, 
                    string Street, 
                    int ZipCode, 
                    string Technologies, 
                    string TwitterID, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    int Status, 
                    int Operation) {
            this.NewAllApplicantOperAsync(AllApplicantId, AdditionalInfo, Address, AssignedTo, Attachments, city, Comments, Country, CurrentCTC, CurrentEmployer, CurrentJobTitle, EmailId, ExpectedCTC, ExperianceinMonths, FKApplicantIdStatus, FKCompanyId, HighestQualification, LinkedInID, MobileNo, Name, Skills, SkypeID, State, Street, ZipCode, Technologies, TwitterID, CreatedEmpID, ModifiedEmpID, Status, Operation, null);
        }
        
        /// <remarks/>
        public void NewAllApplicantOperAsync(
                    int AllApplicantId, 
                    string AdditionalInfo, 
                    string Address, 
                    int AssignedTo, 
                    string Attachments, 
                    string city, 
                    string Comments, 
                    string Country, 
                    string CurrentCTC, 
                    string CurrentEmployer, 
                    string CurrentJobTitle, 
                    string EmailId, 
                    string ExpectedCTC, 
                    int ExperianceinMonths, 
                    int FKApplicantIdStatus, 
                    int FKCompanyId, 
                    string HighestQualification, 
                    string LinkedInID, 
                    string MobileNo, 
                    string Name, 
                    string Skills, 
                    string SkypeID, 
                    string State, 
                    string Street, 
                    int ZipCode, 
                    string Technologies, 
                    string TwitterID, 
                    int CreatedEmpID, 
                    int ModifiedEmpID, 
                    int Status, 
                    int Operation, 
                    object userState) {
            if ((this.NewAllApplicantOperOperationCompleted == null)) {
                this.NewAllApplicantOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewAllApplicantOperOperationCompleted);
            }
            this.InvokeAsync("NewAllApplicantOper", new object[] {
                        AllApplicantId,
                        AdditionalInfo,
                        Address,
                        AssignedTo,
                        Attachments,
                        city,
                        Comments,
                        Country,
                        CurrentCTC,
                        CurrentEmployer,
                        CurrentJobTitle,
                        EmailId,
                        ExpectedCTC,
                        ExperianceinMonths,
                        FKApplicantIdStatus,
                        FKCompanyId,
                        HighestQualification,
                        LinkedInID,
                        MobileNo,
                        Name,
                        Skills,
                        SkypeID,
                        State,
                        Street,
                        ZipCode,
                        Technologies,
                        TwitterID,
                        CreatedEmpID,
                        ModifiedEmpID,
                        Status,
                        Operation}, this.NewAllApplicantOperOperationCompleted, userState);
        }
        
        private void OnNewAllApplicantOperOperationCompleted(object arg) {
            if ((this.NewAllApplicantOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewAllApplicantOperCompleted(this, new NewAllApplicantOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ScheduleInterview", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ScheduleInterview(string Attachments, string Comments, System.DateTime Date, int ApplicantId, int InterviewType, string Location, string Time, int CreatedEmpID, int ModifiedEmpID, System.DateTime CreatedDate, System.DateTime ModifiedDate, int Status) {
            object[] results = this.Invoke("ScheduleInterview", new object[] {
                        Attachments,
                        Comments,
                        Date,
                        ApplicantId,
                        InterviewType,
                        Location,
                        Time,
                        CreatedEmpID,
                        ModifiedEmpID,
                        CreatedDate,
                        ModifiedDate,
                        Status});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ScheduleInterviewAsync(string Attachments, string Comments, System.DateTime Date, int ApplicantId, int InterviewType, string Location, string Time, int CreatedEmpID, int ModifiedEmpID, System.DateTime CreatedDate, System.DateTime ModifiedDate, int Status) {
            this.ScheduleInterviewAsync(Attachments, Comments, Date, ApplicantId, InterviewType, Location, Time, CreatedEmpID, ModifiedEmpID, CreatedDate, ModifiedDate, Status, null);
        }
        
        /// <remarks/>
        public void ScheduleInterviewAsync(string Attachments, string Comments, System.DateTime Date, int ApplicantId, int InterviewType, string Location, string Time, int CreatedEmpID, int ModifiedEmpID, System.DateTime CreatedDate, System.DateTime ModifiedDate, int Status, object userState) {
            if ((this.ScheduleInterviewOperationCompleted == null)) {
                this.ScheduleInterviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScheduleInterviewOperationCompleted);
            }
            this.InvokeAsync("ScheduleInterview", new object[] {
                        Attachments,
                        Comments,
                        Date,
                        ApplicantId,
                        InterviewType,
                        Location,
                        Time,
                        CreatedEmpID,
                        ModifiedEmpID,
                        CreatedDate,
                        ModifiedDate,
                        Status}, this.ScheduleInterviewOperationCompleted, userState);
        }
        
        private void OnScheduleInterviewOperationCompleted(object arg) {
            if ((this.ScheduleInterviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScheduleInterviewCompleted(this, new ScheduleInterviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetInterview", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetInterview(int Id, string jsonInterView) {
            object[] results = this.Invoke("SetInterview", new object[] {
                        Id,
                        jsonInterView});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetInterviewAsync(int Id, string jsonInterView) {
            this.SetInterviewAsync(Id, jsonInterView, null);
        }
        
        /// <remarks/>
        public void SetInterviewAsync(int Id, string jsonInterView, object userState) {
            if ((this.SetInterviewOperationCompleted == null)) {
                this.SetInterviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetInterviewOperationCompleted);
            }
            this.InvokeAsync("SetInterview", new object[] {
                        Id,
                        jsonInterView}, this.SetInterviewOperationCompleted, userState);
        }
        
        private void OnSetInterviewOperationCompleted(object arg) {
            if ((this.SetInterviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetInterviewCompleted(this, new SetInterviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InterviewAssessment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InterviewAssessment(int InterviewAssessmentId, int FKInterviewerId, int FKScheduledId, int InterpersonalSkills, int LeadershipSkills, int PresentaitonSkills, int Status, int Teamwork, int TechinicalAbility, string Comments, int Operation) {
            object[] results = this.Invoke("InterviewAssessment", new object[] {
                        InterviewAssessmentId,
                        FKInterviewerId,
                        FKScheduledId,
                        InterpersonalSkills,
                        LeadershipSkills,
                        PresentaitonSkills,
                        Status,
                        Teamwork,
                        TechinicalAbility,
                        Comments,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InterviewAssessmentAsync(int InterviewAssessmentId, int FKInterviewerId, int FKScheduledId, int InterpersonalSkills, int LeadershipSkills, int PresentaitonSkills, int Status, int Teamwork, int TechinicalAbility, string Comments, int Operation) {
            this.InterviewAssessmentAsync(InterviewAssessmentId, FKInterviewerId, FKScheduledId, InterpersonalSkills, LeadershipSkills, PresentaitonSkills, Status, Teamwork, TechinicalAbility, Comments, Operation, null);
        }
        
        /// <remarks/>
        public void InterviewAssessmentAsync(int InterviewAssessmentId, int FKInterviewerId, int FKScheduledId, int InterpersonalSkills, int LeadershipSkills, int PresentaitonSkills, int Status, int Teamwork, int TechinicalAbility, string Comments, int Operation, object userState) {
            if ((this.InterviewAssessmentOperationCompleted == null)) {
                this.InterviewAssessmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterviewAssessmentOperationCompleted);
            }
            this.InvokeAsync("InterviewAssessment", new object[] {
                        InterviewAssessmentId,
                        FKInterviewerId,
                        FKScheduledId,
                        InterpersonalSkills,
                        LeadershipSkills,
                        PresentaitonSkills,
                        Status,
                        Teamwork,
                        TechinicalAbility,
                        Comments,
                        Operation}, this.InterviewAssessmentOperationCompleted, userState);
        }
        
        private void OnInterviewAssessmentOperationCompleted(object arg) {
            if ((this.InterviewAssessmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterviewAssessmentCompleted(this, new InterviewAssessmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ApplicantStatusUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ApplicantStatusUpdate(int ApplicantId, int OpeningId, int StatusId, int AssignTo, int AssignBy, string Comments, int operationId) {
            object[] results = this.Invoke("ApplicantStatusUpdate", new object[] {
                        ApplicantId,
                        OpeningId,
                        StatusId,
                        AssignTo,
                        AssignBy,
                        Comments,
                        operationId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ApplicantStatusUpdateAsync(int ApplicantId, int OpeningId, int StatusId, int AssignTo, int AssignBy, string Comments, int operationId) {
            this.ApplicantStatusUpdateAsync(ApplicantId, OpeningId, StatusId, AssignTo, AssignBy, Comments, operationId, null);
        }
        
        /// <remarks/>
        public void ApplicantStatusUpdateAsync(int ApplicantId, int OpeningId, int StatusId, int AssignTo, int AssignBy, string Comments, int operationId, object userState) {
            if ((this.ApplicantStatusUpdateOperationCompleted == null)) {
                this.ApplicantStatusUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplicantStatusUpdateOperationCompleted);
            }
            this.InvokeAsync("ApplicantStatusUpdate", new object[] {
                        ApplicantId,
                        OpeningId,
                        StatusId,
                        AssignTo,
                        AssignBy,
                        Comments,
                        operationId}, this.ApplicantStatusUpdateOperationCompleted, userState);
        }
        
        private void OnApplicantStatusUpdateOperationCompleted(object arg) {
            if ((this.ApplicantStatusUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplicantStatusUpdateCompleted(this, new ApplicantStatusUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimesheetReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TimesheetReport(int empId, int ProjectId, System.DateTime startDate, System.DateTime endDate) {
            object[] results = this.Invoke("TimesheetReport", new object[] {
                        empId,
                        ProjectId,
                        startDate,
                        endDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TimesheetReportAsync(int empId, int ProjectId, System.DateTime startDate, System.DateTime endDate) {
            this.TimesheetReportAsync(empId, ProjectId, startDate, endDate, null);
        }
        
        /// <remarks/>
        public void TimesheetReportAsync(int empId, int ProjectId, System.DateTime startDate, System.DateTime endDate, object userState) {
            if ((this.TimesheetReportOperationCompleted == null)) {
                this.TimesheetReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTimesheetReportOperationCompleted);
            }
            this.InvokeAsync("TimesheetReport", new object[] {
                        empId,
                        ProjectId,
                        startDate,
                        endDate}, this.TimesheetReportOperationCompleted, userState);
        }
        
        private void OnTimesheetReportOperationCompleted(object arg) {
            if ((this.TimesheetReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TimesheetReportCompleted(this, new TimesheetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InterviewScheduleUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InterviewScheduleUpdate(int ApplicantId, int InterviewerId, int Interviewer, int Status, string Attachments, string Comments, int Operation) {
            object[] results = this.Invoke("InterviewScheduleUpdate", new object[] {
                        ApplicantId,
                        InterviewerId,
                        Interviewer,
                        Status,
                        Attachments,
                        Comments,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InterviewScheduleUpdateAsync(int ApplicantId, int InterviewerId, int Interviewer, int Status, string Attachments, string Comments, int Operation) {
            this.InterviewScheduleUpdateAsync(ApplicantId, InterviewerId, Interviewer, Status, Attachments, Comments, Operation, null);
        }
        
        /// <remarks/>
        public void InterviewScheduleUpdateAsync(int ApplicantId, int InterviewerId, int Interviewer, int Status, string Attachments, string Comments, int Operation, object userState) {
            if ((this.InterviewScheduleUpdateOperationCompleted == null)) {
                this.InterviewScheduleUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInterviewScheduleUpdateOperationCompleted);
            }
            this.InvokeAsync("InterviewScheduleUpdate", new object[] {
                        ApplicantId,
                        InterviewerId,
                        Interviewer,
                        Status,
                        Attachments,
                        Comments,
                        Operation}, this.InterviewScheduleUpdateOperationCompleted, userState);
        }
        
        private void OnInterviewScheduleUpdateOperationCompleted(object arg) {
            if ((this.InterviewScheduleUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InterviewScheduleUpdateCompleted(this, new InterviewScheduleUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateJoinedEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateJoinedEmployee(
                    int FKNewApp, 
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    int CompanyId, 
                    int FkEmpStatus, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText) {
            object[] results = this.Invoke("CreateJoinedEmployee", new object[] {
                        FKNewApp,
                        FirstName,
                        LastName,
                        Title,
                        EmployeeCode,
                        JobTitle,
                        Manager,
                        ProfilePicUrl,
                        QuotesPictureUrl,
                        BackGroundPicUrl,
                        HireDate,
                        ConfirmationDate,
                        WorkEMail,
                        OfficeLocation,
                        WorkLocation,
                        EmptTypeId,
                        RelievingDate,
                        CompanyId,
                        FkEmpStatus,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        WeekOffDays,
                        StartTime,
                        EndTime,
                        QuotesText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateJoinedEmployeeAsync(
                    int FKNewApp, 
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    int CompanyId, 
                    int FkEmpStatus, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText) {
            this.CreateJoinedEmployeeAsync(FKNewApp, FirstName, LastName, Title, EmployeeCode, JobTitle, Manager, ProfilePicUrl, QuotesPictureUrl, BackGroundPicUrl, HireDate, ConfirmationDate, WorkEMail, OfficeLocation, WorkLocation, EmptTypeId, RelievingDate, CompanyId, FkEmpStatus, CreatedDate, ModifiedDate, CreatedEmpId, ModifiedEmpId, WeekOffDays, StartTime, EndTime, QuotesText, null);
        }
        
        /// <remarks/>
        public void CreateJoinedEmployeeAsync(
                    int FKNewApp, 
                    string FirstName, 
                    string LastName, 
                    string Title, 
                    string EmployeeCode, 
                    int JobTitle, 
                    int Manager, 
                    string ProfilePicUrl, 
                    string QuotesPictureUrl, 
                    string BackGroundPicUrl, 
                    System.DateTime HireDate, 
                    System.DateTime ConfirmationDate, 
                    string WorkEMail, 
                    int OfficeLocation, 
                    string WorkLocation, 
                    int EmptTypeId, 
                    System.DateTime RelievingDate, 
                    int CompanyId, 
                    int FkEmpStatus, 
                    System.DateTime CreatedDate, 
                    System.DateTime ModifiedDate, 
                    int CreatedEmpId, 
                    int ModifiedEmpId, 
                    int WeekOffDays, 
                    string StartTime, 
                    string EndTime, 
                    string QuotesText, 
                    object userState) {
            if ((this.CreateJoinedEmployeeOperationCompleted == null)) {
                this.CreateJoinedEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateJoinedEmployeeOperationCompleted);
            }
            this.InvokeAsync("CreateJoinedEmployee", new object[] {
                        FKNewApp,
                        FirstName,
                        LastName,
                        Title,
                        EmployeeCode,
                        JobTitle,
                        Manager,
                        ProfilePicUrl,
                        QuotesPictureUrl,
                        BackGroundPicUrl,
                        HireDate,
                        ConfirmationDate,
                        WorkEMail,
                        OfficeLocation,
                        WorkLocation,
                        EmptTypeId,
                        RelievingDate,
                        CompanyId,
                        FkEmpStatus,
                        CreatedDate,
                        ModifiedDate,
                        CreatedEmpId,
                        ModifiedEmpId,
                        WeekOffDays,
                        StartTime,
                        EndTime,
                        QuotesText}, this.CreateJoinedEmployeeOperationCompleted, userState);
        }
        
        private void OnCreateJoinedEmployeeOperationCompleted(object arg) {
            if ((this.CreateJoinedEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateJoinedEmployeeCompleted(this, new CreateJoinedEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UspUpdateJoinedEmpolyee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UspUpdateJoinedEmpolyee(string Email, int ModifiedId, int Id, int Operation) {
            object[] results = this.Invoke("UspUpdateJoinedEmpolyee", new object[] {
                        Email,
                        ModifiedId,
                        Id,
                        Operation});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UspUpdateJoinedEmpolyeeAsync(string Email, int ModifiedId, int Id, int Operation) {
            this.UspUpdateJoinedEmpolyeeAsync(Email, ModifiedId, Id, Operation, null);
        }
        
        /// <remarks/>
        public void UspUpdateJoinedEmpolyeeAsync(string Email, int ModifiedId, int Id, int Operation, object userState) {
            if ((this.UspUpdateJoinedEmpolyeeOperationCompleted == null)) {
                this.UspUpdateJoinedEmpolyeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUspUpdateJoinedEmpolyeeOperationCompleted);
            }
            this.InvokeAsync("UspUpdateJoinedEmpolyee", new object[] {
                        Email,
                        ModifiedId,
                        Id,
                        Operation}, this.UspUpdateJoinedEmpolyeeOperationCompleted, userState);
        }
        
        private void OnUspUpdateJoinedEmpolyeeOperationCompleted(object arg) {
            if ((this.UspUpdateJoinedEmpolyeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UspUpdateJoinedEmpolyeeCompleted(this, new UspUpdateJoinedEmpolyeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OpeningsOperCompletedEventHandler(object sender, OpeningsOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OpeningsOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OpeningsOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void NewApplicantOperCompletedEventHandler(object sender, NewApplicantOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewApplicantOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewApplicantOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void NewAllApplicantOperCompletedEventHandler(object sender, NewAllApplicantOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewAllApplicantOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewAllApplicantOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ScheduleInterviewCompletedEventHandler(object sender, ScheduleInterviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScheduleInterviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScheduleInterviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SetInterviewCompletedEventHandler(object sender, SetInterviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetInterviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetInterviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InterviewAssessmentCompletedEventHandler(object sender, InterviewAssessmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterviewAssessmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterviewAssessmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ApplicantStatusUpdateCompletedEventHandler(object sender, ApplicantStatusUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplicantStatusUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplicantStatusUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void TimesheetReportCompletedEventHandler(object sender, TimesheetReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TimesheetReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TimesheetReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InterviewScheduleUpdateCompletedEventHandler(object sender, InterviewScheduleUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InterviewScheduleUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InterviewScheduleUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateJoinedEmployeeCompletedEventHandler(object sender, CreateJoinedEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateJoinedEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateJoinedEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UspUpdateJoinedEmpolyeeCompletedEventHandler(object sender, UspUpdateJoinedEmpolyeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UspUpdateJoinedEmpolyeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UspUpdateJoinedEmpolyeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591